{
  "address": "0x045Bef95F7FC689aDfE2B2DA1488fDC20B65cd01",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_issuerRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sbtTemplate",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sbtSession",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ERC721EnumerableForbiddenBatchMint",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC721IncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC721InsufficientApproval",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidOperator",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC721NonexistentToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "ERC721OutOfBoundsIndex",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "templateId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "sessionId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "BatchSBTMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "templateId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "sessionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "SBTMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "revoker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "SBTRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "bytes32",
          "name": "sessionId",
          "type": "bytes32"
        }
      ],
      "name": "batchMintFromSession",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "sessionId",
          "type": "bytes32"
        }
      ],
      "name": "claimFromSession",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNextTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getSBTBasicInfo",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "mintedAt",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "revoked",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getSBTInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "issuer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "mintedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "templateId",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "sessionId",
              "type": "bytes32"
            },
            {
              "internalType": "bool",
              "name": "revoked",
              "type": "bool"
            }
          ],
          "internalType": "struct SBTToken.SBTData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getUserSBTs",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "hasTokenFromSession",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "hasTokenFromTemplate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "issuerRegistry",
      "outputs": [
        {
          "internalType": "contract IssuerRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "sessionId",
          "type": "bytes32"
        }
      ],
      "name": "mintFromSession",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "templateId",
          "type": "uint256"
        }
      ],
      "name": "mintFromTemplate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "revokeSBT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "sbtData",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "mintedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "templateId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "sessionId",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "revoked",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sbtSession",
      "outputs": [
        {
          "internalType": "contract SBTSession",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sbtTemplate",
      "outputs": [
        {
          "internalType": "contract SBTTemplate",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf0212b4656f2f3de7887c102a7d90db76ed8583609721f44871951f1f7d34d82",
  "receipt": {
    "to": null,
    "from": "0xd82c3510567ce848DfcAD32b7e69877C0f66D9b1",
    "contractAddress": "0x045Bef95F7FC689aDfE2B2DA1488fDC20B65cd01",
    "transactionIndex": 2,
    "gasUsed": "3702586",
    "logsBloom": "0x
    "blockHash": "0x119e32a000352b2507ffac92b1825f99fcbd8e591d76fbb1b559c6cfc4cfb498",
    "transactionHash": "0xf0212b4656f2f3de7887c102a7d90db76ed8583609721f44871951f1f7d34d82",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 38310904,
        "transactionHash": "0xf0212b4656f2f3de7887c102a7d90db76ed8583609721f44871951f1f7d34d82",
        "address": "0x045Bef95F7FC689aDfE2B2DA1488fDC20B65cd01",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d82c3510567ce848dfcad32b7e69877c0f66d9b1"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x119e32a000352b2507ffac92b1825f99fcbd8e591d76fbb1b559c6cfc4cfb498"
      }
    ],
    "blockNumber": 38310904,
    "cumulativeGasUsed": "3936704",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd82c3510567ce848DfcAD32b7e69877C0f66D9b1",
    "0xFB1FF20107a62fE550d83ACa4E4Bf460dD77a944",
    "0x223A7cBfc7fAA7261E97EEEfFD7c8356A92B40be",
    "0x1672551E251E0Cc40521Cdab4eC44095C6b25445"
  ],
  "numDeployments": 3,
  "solcInputHash": "127a6125411a5042ffefa71ec92c8b89",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_issuerRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sbtTemplate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sbtSession\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ERC721EnumerableForbiddenBatchMint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"ERC721OutOfBoundsIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"templateId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"sessionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BatchSBTMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"templateId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sessionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SBTMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revoker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SBTRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"bytes32\",\"name\":\"sessionId\",\"type\":\"bytes32\"}],\"name\":\"batchMintFromSession\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sessionId\",\"type\":\"bytes32\"}],\"name\":\"claimFromSession\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getSBTBasicInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintedAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"revoked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getSBTInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"templateId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"sessionId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"revoked\",\"type\":\"bool\"}],\"internalType\":\"struct SBTToken.SBTData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getUserSBTs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"hasTokenFromSession\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hasTokenFromTemplate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issuerRegistry\",\"outputs\":[{\"internalType\":\"contract IssuerRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"sessionId\",\"type\":\"bytes32\"}],\"name\":\"mintFromSession\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"templateId\",\"type\":\"uint256\"}],\"name\":\"mintFromTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"revokeSBT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sbtData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"templateId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"sessionId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"revoked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sbtSession\",\"outputs\":[{\"internalType\":\"contract SBTSession\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sbtTemplate\",\"outputs\":[{\"internalType\":\"contract SBTTemplate\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"SBT System POC\",\"details\":\"Soulbound Token (Non-transferable ERC721) implementation with template and session-based minting\",\"errors\":{\"ERC721EnumerableForbiddenBatchMint()\":[{\"details\":\"Batch mint is not allowed.\"}],\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721OutOfBoundsIndex(address,uint256)\":[{\"details\":\"An `owner`'s token query was out of bounds for `index`. NOTE: The owner being `address(0)` indicates a global out of bounds index.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Override approve to prevent approvals\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"batchMintFromSession(address[],bytes32)\":{\"details\":\"Batch mint SBTs from a session to multiple recipients\",\"params\":{\"recipients\":\"Array of recipient addresses\",\"sessionId\":\"Session ID to mint from\"}},\"claimFromSession(bytes32)\":{\"details\":\"Self-service claim SBT from a session (users can mint directly)\",\"params\":{\"sessionId\":\"Session ID to claim from\"}},\"getApproved(uint256)\":{\"details\":\"Override getApproved to always return zero address\"},\"getNextTokenId()\":{\"details\":\"Get next token ID\"},\"getSBTBasicInfo(uint256)\":{\"details\":\"Get SBT basic info\",\"params\":{\"tokenId\":\"Token ID to query\"},\"returns\":{\"description\":\"Token description\",\"issuer\":\"Issuer address\",\"mintedAt\":\"Mint timestamp\",\"name\":\"Token name\",\"revoked\":\"Revocation status\"}},\"getSBTInfo(uint256)\":{\"details\":\"Get SBT information\",\"params\":{\"tokenId\":\"Token ID to query\"},\"returns\":{\"_0\":\"SBTData struct with all token information\"}},\"getUserSBTs(address)\":{\"details\":\"Get all token IDs owned by an address\",\"params\":{\"owner\":\"Address to query\"},\"returns\":{\"_0\":\"uint256[] Array of token IDs\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Override isApprovedForAll to always return false\"},\"mintFromSession(address,bytes32)\":{\"details\":\"Mint SBT from a session (for QR code claims)\",\"params\":{\"sessionId\":\"Session ID to mint from\",\"to\":\"Address of the recipient\"}},\"mintFromTemplate(address,uint256)\":{\"details\":\"Mint SBT from a template (direct minting by issuer)\",\"params\":{\"templateId\":\"Template ID to mint from\",\"to\":\"Address of the recipient\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"pause()\":{\"details\":\"Pause contract (only owner)\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"revokeSBT(uint256)\":{\"details\":\"Revoke an SBT (can only be done by issuer or owner)\",\"params\":{\"tokenId\":\"ID of the token to revoke\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Override setApprovalForAll to prevent approvals\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Unpause contract (only owner)\"}},\"title\":\"SBTToken\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SBTToken.sol\":\"SBTToken\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {IERC721Enumerable} from \\\"./IERC721Enumerable.sol\\\";\\nimport {IERC165} from \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds enumerability\\n * of all the token ids in the contract as well as all token ids owned by each account.\\n *\\n * CAUTION: `ERC721` extensions that implement custom `balanceOf` logic, such as `ERC721Consecutive`,\\n * interfere with enumerability and should not be used together with `ERC721Enumerable`.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    mapping(address owner => mapping(uint256 index => uint256)) private _ownedTokens;\\n    mapping(uint256 tokenId => uint256) private _ownedTokensIndex;\\n\\n    uint256[] private _allTokens;\\n    mapping(uint256 tokenId => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev An `owner`'s token query was out of bounds for `index`.\\n     *\\n     * NOTE: The owner being `address(0)` indicates a global out of bounds index.\\n     */\\n    error ERC721OutOfBoundsIndex(address owner, uint256 index);\\n\\n    /**\\n     * @dev Batch mint is not allowed.\\n     */\\n    error ERC721EnumerableForbiddenBatchMint();\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual returns (uint256) {\\n        if (index >= balanceOf(owner)) {\\n            revert ERC721OutOfBoundsIndex(owner, index);\\n        }\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual returns (uint256) {\\n        if (index >= totalSupply()) {\\n            revert ERC721OutOfBoundsIndex(address(0), index);\\n        }\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_update}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual override returns (address) {\\n        address previousOwner = super._update(to, tokenId, auth);\\n\\n        if (previousOwner == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (previousOwner != to) {\\n            _removeTokenFromOwnerEnumeration(previousOwner, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (previousOwner != to) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n\\n        return previousOwner;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = balanceOf(to) - 1;\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = balanceOf(from);\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n\\n    /**\\n     * See {ERC721-_increaseBalance}. We need that to account tokens that were minted in batch\\n     */\\n    function _increaseBalance(address account, uint128 amount) internal virtual override {\\n        if (amount > 0) {\\n            revert ERC721EnumerableForbiddenBatchMint();\\n        }\\n        super._increaseBalance(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x36797469c391ea5ba27408e6ca8adf0824ba6f3adea9c139be18bd6f63232c16\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3d6954a93ac198a2ffa384fa58ccf18e7e235263e051a394328002eff4e073de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/IssuerRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IssuerRegistry\\r\\n * @dev Contract to manage authorized SBT issuers\\r\\n * @author SBT System POC\\r\\n */\\r\\ncontract IssuerRegistry is Ownable, Pausable {\\r\\n    struct IssuerInfo {\\r\\n        string name;\\r\\n        string organization;\\r\\n        bool authorized;\\r\\n        uint256 addedAt;\\r\\n    }\\r\\n\\r\\n    // Mapping from issuer address to issuer info\\r\\n    mapping(address => IssuerInfo) private issuers;\\r\\n\\r\\n    // Array to track all issuer addresses for enumeration\\r\\n    address[] public issuerAddresses;\\r\\n\\r\\n    // Mapping to track if address is in the array (for gas optimization)\\r\\n    mapping(address => bool) private isInArray;\\r\\n\\r\\n    // Events\\r\\n    event IssuerAdded(\\r\\n        address indexed issuer,\\r\\n        string name,\\r\\n        string organization,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    event IssuerRemoved(\\r\\n        address indexed issuer,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    event IssuerUpdated(\\r\\n        address indexed issuer,\\r\\n        string name,\\r\\n        string organization,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    constructor(address _owner) Ownable(_owner) {\\r\\n        // Add the owner as the first authorized issuer\\r\\n        _addIssuerInternal(_owner, \\\"System Admin\\\", \\\"SBT System\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a new authorized issuer\\r\\n     * @param issuer Address of the issuer\\r\\n     * @param name Name of the issuer\\r\\n     * @param organization Organization name\\r\\n     */\\r\\n    function addIssuer(\\r\\n        address issuer,\\r\\n        string memory name,\\r\\n        string memory organization\\r\\n    ) external onlyOwner whenNotPaused {\\r\\n        require(issuer != address(0), \\\"IssuerRegistry: Invalid issuer address\\\");\\r\\n        require(bytes(name).length > 0, \\\"IssuerRegistry: Name cannot be empty\\\");\\r\\n        require(!issuers[issuer].authorized, \\\"IssuerRegistry: Issuer already exists\\\");\\r\\n\\r\\n        _addIssuerInternal(issuer, name, organization);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to add issuer\\r\\n     */\\r\\n    function _addIssuerInternal(\\r\\n        address issuer,\\r\\n        string memory name,\\r\\n        string memory organization\\r\\n    ) internal {\\r\\n        issuers[issuer] = IssuerInfo({\\r\\n            name: name,\\r\\n            organization: organization,\\r\\n            authorized: true,\\r\\n            addedAt: block.timestamp\\r\\n        });\\r\\n\\r\\n        if (!isInArray[issuer]) {\\r\\n            issuerAddresses.push(issuer);\\r\\n            isInArray[issuer] = true;\\r\\n        }\\r\\n\\r\\n        emit IssuerAdded(issuer, name, organization, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove an authorized issuer\\r\\n     * @param issuer Address of the issuer to remove\\r\\n     */\\r\\n    function removeIssuer(address issuer) external onlyOwner whenNotPaused {\\r\\n        require(issuer != address(0), \\\"IssuerRegistry: Invalid issuer address\\\");\\r\\n        require(issuers[issuer].authorized, \\\"IssuerRegistry: Issuer not found\\\");\\r\\n        require(issuer != owner(), \\\"IssuerRegistry: Cannot remove owner\\\");\\r\\n\\r\\n        issuers[issuer].authorized = false;\\r\\n\\r\\n        emit IssuerRemoved(issuer, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update issuer information\\r\\n     * @param issuer Address of the issuer\\r\\n     * @param name New name\\r\\n     * @param organization New organization\\r\\n     */\\r\\n    function updateIssuer(\\r\\n        address issuer,\\r\\n        string memory name,\\r\\n        string memory organization\\r\\n    ) external onlyOwner whenNotPaused {\\r\\n        require(issuer != address(0), \\\"IssuerRegistry: Invalid issuer address\\\");\\r\\n        require(issuers[issuer].authorized, \\\"IssuerRegistry: Issuer not found\\\");\\r\\n        require(bytes(name).length > 0, \\\"IssuerRegistry: Name cannot be empty\\\");\\r\\n\\r\\n        issuers[issuer].name = name;\\r\\n        issuers[issuer].organization = organization;\\r\\n\\r\\n        emit IssuerUpdated(issuer, name, organization, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an address is an authorized issuer\\r\\n     * @param issuer Address to check\\r\\n     * @return bool True if authorized, false otherwise\\r\\n     */\\r\\n    function isAuthorizedIssuer(address issuer) external view returns (bool) {\\r\\n        return issuers[issuer].authorized;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get issuer information\\r\\n     * @param issuer Address of the issuer\\r\\n     * @return IssuerInfo struct containing issuer details\\r\\n     */\\r\\n    function getIssuerInfo(address issuer) external view returns (IssuerInfo memory) {\\r\\n        return issuers[issuer];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get all authorized issuer addresses\\r\\n     * @return address[] Array of all issuer addresses\\r\\n     */\\r\\n    function getAllIssuers() external view returns (address[] memory) {\\r\\n        uint256 authorizedCount = 0;\\r\\n\\r\\n        // Count authorized issuers\\r\\n        for (uint256 i = 0; i < issuerAddresses.length; i++) {\\r\\n            if (issuers[issuerAddresses[i]].authorized) {\\r\\n                authorizedCount++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Create array of authorized issuers\\r\\n        address[] memory authorizedIssuers = new address[](authorizedCount);\\r\\n        uint256 index = 0;\\r\\n\\r\\n        for (uint256 i = 0; i < issuerAddresses.length; i++) {\\r\\n            if (issuers[issuerAddresses[i]].authorized) {\\r\\n                authorizedIssuers[index] = issuerAddresses[i];\\r\\n                index++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return authorizedIssuers;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get total count of authorized issuers\\r\\n     * @return uint256 Count of authorized issuers\\r\\n     */\\r\\n    function getAuthorizedIssuerCount() external view returns (uint256) {\\r\\n        uint256 count = 0;\\r\\n        for (uint256 i = 0; i < issuerAddresses.length; i++) {\\r\\n            if (issuers[issuerAddresses[i]].authorized) {\\r\\n                count++;\\r\\n            }\\r\\n        }\\r\\n        return count;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Pause the contract\\r\\n     */\\r\\n    function pause() external onlyOwner {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Unpause the contract\\r\\n     */\\r\\n    function unpause() external onlyOwner {\\r\\n        _unpause();\\r\\n    }\\r\\n}\",\"keccak256\":\"0x2ff2ba6a3a1cc897ce7bc3452860e0ad8b4f75829100e34d867b694dacdc976b\",\"license\":\"MIT\"},\"contracts/SBTSession.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\r\\nimport \\\"./IssuerRegistry.sol\\\";\\r\\nimport \\\"./SBTTemplate.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SBTSession\\r\\n * @dev Contract for managing time-limited SBT minting sessions with unique IDs\\r\\n */\\r\\ncontract SBTSession is Ownable, Pausable {\\r\\n    struct Session {\\r\\n        bytes32 sessionId;\\r\\n        uint256 templateId;\\r\\n        uint256 maxMints;\\r\\n        uint256 currentMints;\\r\\n        uint256 endTimestamp;\\r\\n        address issuer;\\r\\n        bool active;\\r\\n        string title; // Optional session title for UI\\r\\n    }\\r\\n\\r\\n    // State variables\\r\\n    mapping(bytes32 => Session) public sessions;\\r\\n    mapping(bytes32 => mapping(address => bool)) public hasClaimed;\\r\\n    mapping(address => bytes32[]) public issuerSessions;\\r\\n\\r\\n    // For tracking unique session generation\\r\\n    uint256 private _sessionNonce;\\r\\n\\r\\n    IssuerRegistry public immutable issuerRegistry;\\r\\n    SBTTemplate public immutable sbtTemplate;\\r\\n    address public sbtTokenContract;\\r\\n\\r\\n    // Events\\r\\n    event SessionCreated(\\r\\n        bytes32 indexed sessionId,\\r\\n        uint256 indexed templateId,\\r\\n        address indexed issuer,\\r\\n        uint256 maxMints,\\r\\n        uint256 endTimestamp,\\r\\n        string title\\r\\n    );\\r\\n\\r\\n    event SessionClaimed(\\r\\n        bytes32 indexed sessionId,\\r\\n        address indexed claimer,\\r\\n        uint256 remainingMints\\r\\n    );\\r\\n\\r\\n    event SessionEnded(bytes32 indexed sessionId, address indexed issuer);\\r\\n    event SessionMintIncreased(bytes32 indexed sessionId, uint256 newCurrentMints);\\r\\n\\r\\n    // Modifiers\\r\\n    modifier onlyAuthorizedIssuer() {\\r\\n        require(\\r\\n            issuerRegistry.isAuthorizedIssuer(msg.sender),\\r\\n            \\\"SBTSession: caller is not an authorized issuer\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier sessionExists(bytes32 sessionId) {\\r\\n        require(sessions[sessionId].issuer != address(0), \\\"SBTSession: session does not exist\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlySessionIssuer(bytes32 sessionId) {\\r\\n        require(sessions[sessionId].issuer == msg.sender, \\\"SBTSession: not session issuer\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier sessionActive(bytes32 sessionId) {\\r\\n        require(sessions[sessionId].active, \\\"SBTSession: session is not active\\\");\\r\\n        require(block.timestamp <= sessions[sessionId].endTimestamp, \\\"SBTSession: session has expired\\\");\\r\\n        require(sessions[sessionId].currentMints < sessions[sessionId].maxMints, \\\"SBTSession: session mint limit reached\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlySBTToken() {\\r\\n        require(msg.sender == sbtTokenContract, \\\"SBTSession: caller is not the SBT token contract\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address _issuerRegistry, address _sbtTemplate) Ownable(msg.sender) {\\r\\n        require(_issuerRegistry != address(0), \\\"SBTSession: invalid issuer registry address\\\");\\r\\n        require(_sbtTemplate != address(0), \\\"SBTSession: invalid SBT template address\\\");\\r\\n\\r\\n        issuerRegistry = IssuerRegistry(_issuerRegistry);\\r\\n        sbtTemplate = SBTTemplate(_sbtTemplate);\\r\\n        _sessionNonce = 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set the SBTToken contract address (only owner can call this)\\r\\n     * @param _sbtTokenContract Address of the SBTToken contract\\r\\n     */\\r\\n    function setSBTTokenContract(address _sbtTokenContract) external onlyOwner {\\r\\n        require(_sbtTokenContract != address(0), \\\"SBTSession: invalid SBT token contract address\\\");\\r\\n        sbtTokenContract = _sbtTokenContract;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Generate a unique session ID\\r\\n     * @param templateId The template ID for this session\\r\\n     * @param maxMints Maximum number of mints allowed\\r\\n     * @param endTimestamp When the session expires\\r\\n     * @param title Optional session title\\r\\n     * @return sessionId Unique session identifier\\r\\n     */\\r\\n    function generateUniqueSessionId(\\r\\n        uint256 templateId,\\r\\n        uint256 maxMints,\\r\\n        uint256 endTimestamp,\\r\\n        string memory title\\r\\n    ) private returns (bytes32) {\\r\\n        _sessionNonce++;\\r\\n        return keccak256(\\r\\n            abi.encodePacked(\\r\\n                msg.sender,\\r\\n                templateId,\\r\\n                maxMints,\\r\\n                endTimestamp,\\r\\n                title,\\r\\n                block.timestamp,\\r\\n                block.prevrandao,\\r\\n                _sessionNonce\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Create a new minting session\\r\\n     * @param templateId The template ID to use for minting\\r\\n     * @param maxMints Maximum number of tokens that can be minted in this session\\r\\n     * @param durationInSeconds How long the session should last\\r\\n     * @param title Optional title for the session\\r\\n     * @return sessionId The unique session identifier\\r\\n     */\\r\\n    function createSession(\\r\\n        uint256 templateId,\\r\\n        uint256 maxMints,\\r\\n        uint256 durationInSeconds,\\r\\n        string memory title\\r\\n    ) external onlyAuthorizedIssuer whenNotPaused returns (bytes32) {\\r\\n        require(sbtTemplate.isTemplateActive(templateId), \\\"SBTSession: template is not active\\\");\\r\\n        require(maxMints > 0, \\\"SBTSession: max mints must be greater than 0\\\");\\r\\n        require(durationInSeconds > 0, \\\"SBTSession: duration must be greater than 0\\\");\\r\\n\\r\\n        SBTTemplate.Template memory template = sbtTemplate.getTemplate(templateId);\\r\\n        require(template.issuer == msg.sender, \\\"SBTSession: not template owner\\\");\\r\\n\\r\\n        uint256 endTimestamp = block.timestamp + durationInSeconds;\\r\\n        bytes32 sessionId = generateUniqueSessionId(templateId, maxMints, endTimestamp, title);\\r\\n\\r\\n        // Ensure uniqueness (should be extremely rare to have collisions)\\r\\n        require(sessions[sessionId].issuer == address(0), \\\"SBTSession: session ID collision\\\");\\r\\n\\r\\n        sessions[sessionId] = Session({\\r\\n            sessionId: sessionId,\\r\\n            templateId: templateId,\\r\\n            maxMints: maxMints,\\r\\n            currentMints: 0,\\r\\n            endTimestamp: endTimestamp,\\r\\n            issuer: msg.sender,\\r\\n            active: true,\\r\\n            title: title\\r\\n        });\\r\\n\\r\\n        issuerSessions[msg.sender].push(sessionId);\\r\\n\\r\\n        emit SessionCreated(sessionId, templateId, msg.sender, maxMints, endTimestamp, title);\\r\\n\\r\\n        return sessionId;\\r\\n    }\\r\\n\\r\\n    // Note: claimFromSession is now handled directly in SBTToken.claimFromSession()\\r\\n    // This removes the two-step process of claim -> mint\\r\\n\\r\\n    /**\\r\\n     * @dev Increment mint count (called by SBTToken contract)\\r\\n     * @param sessionId The session to increment\\r\\n     */\\r\\n    function incrementMintCount(bytes32 sessionId)\\r\\n        external\\r\\n        onlySBTToken\\r\\n        sessionExists(sessionId)\\r\\n    {\\r\\n        // Only the SBTToken contract can call this\\r\\n        sessions[sessionId].currentMints++;\\r\\n        emit SessionMintIncreased(sessionId, sessions[sessionId].currentMints);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev End a session early (only by issuer)\\r\\n     * @param sessionId The session to end\\r\\n     */\\r\\n    function endSession(bytes32 sessionId)\\r\\n        external\\r\\n        sessionExists(sessionId)\\r\\n        onlySessionIssuer(sessionId)\\r\\n        whenNotPaused\\r\\n    {\\r\\n        require(sessions[sessionId].active, \\\"SBTSession: session already ended\\\");\\r\\n\\r\\n        sessions[sessionId].active = false;\\r\\n        emit SessionEnded(sessionId, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get session details\\r\\n     * @param sessionId The session ID\\r\\n     * @return Session struct with all session data\\r\\n     */\\r\\n    function getSession(bytes32 sessionId)\\r\\n        external\\r\\n        view\\r\\n        sessionExists(sessionId)\\r\\n        returns (Session memory)\\r\\n    {\\r\\n        return sessions[sessionId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get all session IDs for an issuer\\r\\n     * @param issuer The address of the issuer\\r\\n     * @return Array of session IDs\\r\\n     */\\r\\n    function getIssuerSessions(address issuer) external view returns (bytes32[] memory) {\\r\\n        return issuerSessions[issuer];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an address has claimed from a session\\r\\n     * @param sessionId The session ID\\r\\n     * @param claimer The address to check\\r\\n     * @return Boolean indicating if address has claimed\\r\\n     */\\r\\n    function hasClaimedFromSession(bytes32 sessionId, address claimer)\\r\\n        external\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        return hasClaimed[sessionId][claimer];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if a session is currently active and can accept claims\\r\\n     * @param sessionId The session ID\\r\\n     * @return Boolean indicating if session is claimable\\r\\n     */\\r\\n    function isSessionClaimable(bytes32 sessionId) external view returns (bool) {\\r\\n        if (sessions[sessionId].issuer == address(0)) return false;\\r\\n        if (!sessions[sessionId].active) return false;\\r\\n        if (block.timestamp > sessions[sessionId].endTimestamp) return false;\\r\\n        if (sessions[sessionId].currentMints >= sessions[sessionId].maxMints) return false;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get session statistics\\r\\n     * @param sessionId The session ID\\r\\n     * @return currentMints Current number of mints\\r\\n     * @return maxMints Maximum number of mints allowed\\r\\n     * @return remainingMints Number of mints remaining\\r\\n     * @return timeRemaining Seconds until session expires\\r\\n     */\\r\\n    function getSessionStats(bytes32 sessionId)\\r\\n        external\\r\\n        view\\r\\n        sessionExists(sessionId)\\r\\n        returns (\\r\\n            uint256 currentMints,\\r\\n            uint256 maxMints,\\r\\n            uint256 remainingMints,\\r\\n            uint256 timeRemaining\\r\\n        )\\r\\n    {\\r\\n        Session memory session = sessions[sessionId];\\r\\n        currentMints = session.currentMints;\\r\\n        maxMints = session.maxMints;\\r\\n        remainingMints = maxMints > currentMints ? maxMints - currentMints : 0;\\r\\n        timeRemaining = session.endTimestamp > block.timestamp ? session.endTimestamp - block.timestamp : 0;\\r\\n    }\\r\\n\\r\\n    // Admin functions\\r\\n    function pause() external onlyOwner {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    function unpause() external onlyOwner {\\r\\n        _unpause();\\r\\n    }\\r\\n}\",\"keccak256\":\"0x3db454046f6ff99356a51104a083907c0f8dbcb7edbc9f9a03031b002fb08310\",\"license\":\"MIT\"},\"contracts/SBTTemplate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\r\\nimport \\\"./IssuerRegistry.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SBTTemplate\\r\\n * @dev Contract for managing SBT templates that can be used to mint tokens\\r\\n */\\r\\ncontract SBTTemplate is Ownable, Pausable {\\r\\n    struct Template {\\r\\n        uint256 templateId;\\r\\n        string name;\\r\\n        string description;\\r\\n        address issuer;\\r\\n        uint256 createdAt;\\r\\n        bool active;\\r\\n    }\\r\\n\\r\\n    // State variables\\r\\n    uint256 private _templateIdCounter;\\r\\n    mapping(uint256 => Template) public templates;\\r\\n    mapping(address => uint256[]) public issuerTemplates;\\r\\n\\r\\n    IssuerRegistry public immutable issuerRegistry;\\r\\n\\r\\n    // Events\\r\\n    event TemplateCreated(\\r\\n        uint256 indexed templateId,\\r\\n        address indexed issuer,\\r\\n        string name,\\r\\n        string description\\r\\n    );\\r\\n\\r\\n    event TemplateUpdated(\\r\\n        uint256 indexed templateId,\\r\\n        string name,\\r\\n        string description\\r\\n    );\\r\\n\\r\\n    event TemplateDeactivated(uint256 indexed templateId);\\r\\n    event TemplateReactivated(uint256 indexed templateId);\\r\\n\\r\\n    // Modifiers\\r\\n    modifier onlyAuthorizedIssuer() {\\r\\n        require(\\r\\n            issuerRegistry.isAuthorizedIssuer(msg.sender),\\r\\n            \\\"SBTTemplate: caller is not an authorized issuer\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier templateExists(uint256 templateId) {\\r\\n        require(templateId <= _templateIdCounter && templateId > 0, \\\"SBTTemplate: template does not exist\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyTemplateIssuer(uint256 templateId) {\\r\\n        require(templates[templateId].issuer == msg.sender, \\\"SBTTemplate: not template issuer\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address _issuerRegistry) Ownable(msg.sender) {\\r\\n        require(_issuerRegistry != address(0), \\\"SBTTemplate: invalid issuer registry address\\\");\\r\\n        issuerRegistry = IssuerRegistry(_issuerRegistry);\\r\\n        _templateIdCounter = 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Create a new SBT template\\r\\n     * @param name The name for the SBT template\\r\\n     * @param description The description for the SBT template\\r\\n     * @return templateId The ID of the created template\\r\\n     */\\r\\n    function createTemplate(\\r\\n        string memory name,\\r\\n        string memory description\\r\\n    ) external onlyAuthorizedIssuer whenNotPaused returns (uint256) {\\r\\n        require(bytes(name).length > 0, \\\"SBTTemplate: name cannot be empty\\\");\\r\\n        require(bytes(description).length > 0, \\\"SBTTemplate: description cannot be empty\\\");\\r\\n\\r\\n        _templateIdCounter++;\\r\\n        uint256 templateId = _templateIdCounter;\\r\\n\\r\\n        templates[templateId] = Template({\\r\\n            templateId: templateId,\\r\\n            name: name,\\r\\n            description: description,\\r\\n            issuer: msg.sender,\\r\\n            createdAt: block.timestamp,\\r\\n            active: true\\r\\n        });\\r\\n\\r\\n        issuerTemplates[msg.sender].push(templateId);\\r\\n\\r\\n        emit TemplateCreated(templateId, msg.sender, name, description);\\r\\n\\r\\n        return templateId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update an existing template\\r\\n     * @param templateId The ID of the template to update\\r\\n     * @param name The new name for the template\\r\\n     * @param description The new description for the template\\r\\n     */\\r\\n    function updateTemplate(\\r\\n        uint256 templateId,\\r\\n        string memory name,\\r\\n        string memory description\\r\\n    ) external templateExists(templateId) onlyTemplateIssuer(templateId) whenNotPaused {\\r\\n        require(bytes(name).length > 0, \\\"SBTTemplate: name cannot be empty\\\");\\r\\n        require(bytes(description).length > 0, \\\"SBTTemplate: description cannot be empty\\\");\\r\\n        require(templates[templateId].active, \\\"SBTTemplate: template is not active\\\");\\r\\n\\r\\n        templates[templateId].name = name;\\r\\n        templates[templateId].description = description;\\r\\n\\r\\n        emit TemplateUpdated(templateId, name, description);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deactivate a template\\r\\n     * @param templateId The ID of the template to deactivate\\r\\n     */\\r\\n    function deactivateTemplate(uint256 templateId)\\r\\n        external\\r\\n        templateExists(templateId)\\r\\n        onlyTemplateIssuer(templateId)\\r\\n        whenNotPaused\\r\\n    {\\r\\n        require(templates[templateId].active, \\\"SBTTemplate: template already inactive\\\");\\r\\n\\r\\n        templates[templateId].active = false;\\r\\n        emit TemplateDeactivated(templateId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Reactivate a template\\r\\n     * @param templateId The ID of the template to reactivate\\r\\n     */\\r\\n    function reactivateTemplate(uint256 templateId)\\r\\n        external\\r\\n        templateExists(templateId)\\r\\n        onlyTemplateIssuer(templateId)\\r\\n        whenNotPaused\\r\\n    {\\r\\n        require(!templates[templateId].active, \\\"SBTTemplate: template already active\\\");\\r\\n\\r\\n        templates[templateId].active = true;\\r\\n        emit TemplateReactivated(templateId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get template details\\r\\n     * @param templateId The ID of the template\\r\\n     * @return Template struct with all template data\\r\\n     */\\r\\n    function getTemplate(uint256 templateId)\\r\\n        external\\r\\n        view\\r\\n        templateExists(templateId)\\r\\n        returns (Template memory)\\r\\n    {\\r\\n        return templates[templateId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get all template IDs for an issuer\\r\\n     * @param issuer The address of the issuer\\r\\n     * @return Array of template IDs\\r\\n     */\\r\\n    function getIssuerTemplates(address issuer) external view returns (uint256[] memory) {\\r\\n        return issuerTemplates[issuer];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get total number of templates created\\r\\n     * @return The total template count\\r\\n     */\\r\\n    function getTotalTemplates() external view returns (uint256) {\\r\\n        return _templateIdCounter;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if a template is active and exists\\r\\n     * @param templateId The ID of the template\\r\\n     * @return Boolean indicating if template is active\\r\\n     */\\r\\n    function isTemplateActive(uint256 templateId) external view returns (bool) {\\r\\n        if (templateId > _templateIdCounter || templateId == 0) {\\r\\n            return false;\\r\\n        }\\r\\n        return templates[templateId].active;\\r\\n    }\\r\\n\\r\\n    // Admin functions\\r\\n    function pause() external onlyOwner {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    function unpause() external onlyOwner {\\r\\n        _unpause();\\r\\n    }\\r\\n}\",\"keccak256\":\"0x7677115b228ccfea1bf5bff2849b682bfd7f1d6c4f375a16b82d5cffae4f3569\",\"license\":\"MIT\"},\"contracts/SBTToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./IssuerRegistry.sol\\\";\\r\\nimport \\\"./SBTTemplate.sol\\\";\\r\\nimport \\\"./SBTSession.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SBTToken\\r\\n * @dev Soulbound Token (Non-transferable ERC721) implementation with template and session-based minting\\r\\n * @author SBT System POC\\r\\n */\\r\\ncontract SBTToken is ERC721, ERC721Enumerable, Ownable, Pausable, ReentrancyGuard {\\r\\n\\r\\n    struct SBTData {\\r\\n        string name;\\r\\n        string description;\\r\\n        address issuer;\\r\\n        uint256 mintedAt;\\r\\n        uint256 templateId;\\r\\n        bytes32 sessionId;\\r\\n        bool revoked;\\r\\n    }\\r\\n\\r\\n    // Contract references\\r\\n    IssuerRegistry public immutable issuerRegistry;\\r\\n    SBTTemplate public immutable sbtTemplate;\\r\\n    SBTSession public immutable sbtSession;\\r\\n\\r\\n    // Counter for token IDs\\r\\n    uint256 private _nextTokenId = 1;\\r\\n\\r\\n    // Mapping from token ID to SBT data\\r\\n    mapping(uint256 => SBTData) public sbtData;\\r\\n\\r\\n    // Mapping to track if user already has SBT from specific template (prevents duplicates)\\r\\n    mapping(address => mapping(uint256 => bool)) public hasTokenFromTemplate;\\r\\n\\r\\n    // Mapping to track if user already has SBT from specific session (prevents duplicates)\\r\\n    mapping(address => mapping(bytes32 => bool)) public hasTokenFromSession;\\r\\n\\r\\n    // Events\\r\\n    event SBTMinted(\\r\\n        address indexed recipient,\\r\\n        uint256 indexed tokenId,\\r\\n        uint256 indexed templateId,\\r\\n        bytes32 sessionId,\\r\\n        address issuer,\\r\\n        string name,\\r\\n        string description,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    event SBTRevoked(\\r\\n        uint256 indexed tokenId,\\r\\n        address indexed revoker,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    event BatchSBTMinted(\\r\\n        address[] recipients,\\r\\n        uint256[] tokenIds,\\r\\n        uint256 indexed templateId,\\r\\n        bytes32 indexed sessionId,\\r\\n        address indexed issuer,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    // Modifier to check if caller is authorized issuer\\r\\n    modifier onlyAuthorizedIssuer() {\\r\\n        require(\\r\\n            issuerRegistry.isAuthorizedIssuer(msg.sender),\\r\\n            \\\"SBTToken: Not an authorized issuer\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Modifier to check if token exists and not revoked\\r\\n    modifier validToken(uint256 tokenId) {\\r\\n        require(_ownerOf(tokenId) != address(0), \\\"SBTToken: Token does not exist\\\");\\r\\n        require(!sbtData[tokenId].revoked, \\\"SBTToken: Token has been revoked\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address _owner,\\r\\n        address _issuerRegistry,\\r\\n        address _sbtTemplate,\\r\\n        address _sbtSession\\r\\n    ) ERC721(\\\"Soulbound Token\\\", \\\"SBT\\\") Ownable(_owner) {\\r\\n        require(_issuerRegistry != address(0), \\\"SBTToken: Invalid registry address\\\");\\r\\n        require(_sbtTemplate != address(0), \\\"SBTToken: Invalid template address\\\");\\r\\n        require(_sbtSession != address(0), \\\"SBTToken: Invalid session address\\\");\\r\\n\\r\\n        issuerRegistry = IssuerRegistry(_issuerRegistry);\\r\\n        sbtTemplate = SBTTemplate(_sbtTemplate);\\r\\n        sbtSession = SBTSession(_sbtSession);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mint SBT from a template (direct minting by issuer)\\r\\n     * @param to Address of the recipient\\r\\n     * @param templateId Template ID to mint from\\r\\n     */\\r\\n    function mintFromTemplate(\\r\\n        address to,\\r\\n        uint256 templateId\\r\\n    ) external onlyAuthorizedIssuer whenNotPaused nonReentrant {\\r\\n        require(to != address(0), \\\"SBTToken: Cannot mint to zero address\\\");\\r\\n        require(sbtTemplate.isTemplateActive(templateId), \\\"SBTToken: Template is not active\\\");\\r\\n        require(!hasTokenFromTemplate[to][templateId], \\\"SBTToken: User already has token from this template\\\");\\r\\n\\r\\n        SBTTemplate.Template memory template = sbtTemplate.getTemplate(templateId);\\r\\n        require(template.issuer == msg.sender, \\\"SBTToken: Not template owner\\\");\\r\\n\\r\\n        uint256 tokenId = _nextTokenId++;\\r\\n\\r\\n        _safeMint(to, tokenId);\\r\\n\\r\\n        sbtData[tokenId] = SBTData({\\r\\n            name: template.name,\\r\\n            description: template.description,\\r\\n            issuer: msg.sender,\\r\\n            mintedAt: block.timestamp,\\r\\n            templateId: templateId,\\r\\n            sessionId: bytes32(0),\\r\\n            revoked: false\\r\\n        });\\r\\n\\r\\n        hasTokenFromTemplate[to][templateId] = true;\\r\\n\\r\\n        emit SBTMinted(\\r\\n            to,\\r\\n            tokenId,\\r\\n            templateId,\\r\\n            bytes32(0),\\r\\n            msg.sender,\\r\\n            template.name,\\r\\n            template.description,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mint SBT from a session (for QR code claims)\\r\\n     * @param to Address of the recipient\\r\\n     * @param sessionId Session ID to mint from\\r\\n     */\\r\\n    function mintFromSession(\\r\\n        address to,\\r\\n        bytes32 sessionId\\r\\n    ) external onlyAuthorizedIssuer whenNotPaused nonReentrant {\\r\\n        require(to != address(0), \\\"SBTToken: Cannot mint to zero address\\\");\\r\\n        require(sbtSession.isSessionClaimable(sessionId), \\\"SBTToken: Session is not claimable\\\");\\r\\n        require(!hasTokenFromSession[to][sessionId], \\\"SBTToken: User already has token from this session\\\");\\r\\n\\r\\n        SBTSession.Session memory session = sbtSession.getSession(sessionId);\\r\\n        require(session.issuer == msg.sender, \\\"SBTToken: Not session owner\\\");\\r\\n\\r\\n        SBTTemplate.Template memory template = sbtTemplate.getTemplate(session.templateId);\\r\\n\\r\\n        uint256 tokenId = _nextTokenId++;\\r\\n\\r\\n        _safeMint(to, tokenId);\\r\\n\\r\\n        sbtData[tokenId] = SBTData({\\r\\n            name: template.name,\\r\\n            description: template.description,\\r\\n            issuer: msg.sender,\\r\\n            mintedAt: block.timestamp,\\r\\n            templateId: session.templateId,\\r\\n            sessionId: sessionId,\\r\\n            revoked: false\\r\\n        });\\r\\n\\r\\n        hasTokenFromSession[to][sessionId] = true;\\r\\n        hasTokenFromTemplate[to][session.templateId] = true;\\r\\n\\r\\n        // Increment session mint count\\r\\n        sbtSession.incrementMintCount(sessionId);\\r\\n\\r\\n        emit SBTMinted(\\r\\n            to,\\r\\n            tokenId,\\r\\n            session.templateId,\\r\\n            sessionId,\\r\\n            msg.sender,\\r\\n            template.name,\\r\\n            template.description,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Batch mint SBTs from a session to multiple recipients\\r\\n     * @param recipients Array of recipient addresses\\r\\n     * @param sessionId Session ID to mint from\\r\\n     */\\r\\n    function batchMintFromSession(\\r\\n        address[] memory recipients,\\r\\n        bytes32 sessionId\\r\\n    ) external onlyAuthorizedIssuer whenNotPaused nonReentrant {\\r\\n        require(recipients.length > 0, \\\"SBTToken: Empty recipients array\\\");\\r\\n        require(recipients.length <= 100, \\\"SBTToken: Batch size too large\\\"); // Gas limit protection\\r\\n        require(sbtSession.isSessionClaimable(sessionId), \\\"SBTToken: Session is not claimable\\\");\\r\\n\\r\\n        SBTSession.Session memory session = sbtSession.getSession(sessionId);\\r\\n        require(session.issuer == msg.sender, \\\"SBTToken: Not session owner\\\");\\r\\n\\r\\n        // Check if there are enough mints available\\r\\n        (uint256 currentMints, uint256 maxMints,,) = sbtSession.getSessionStats(sessionId);\\r\\n        require(currentMints + recipients.length <= maxMints, \\\"SBTToken: Exceeds session mint limit\\\");\\r\\n\\r\\n        SBTTemplate.Template memory template = sbtTemplate.getTemplate(session.templateId);\\r\\n        uint256[] memory tokenIds = new uint256[](recipients.length);\\r\\n\\r\\n        for (uint256 i = 0; i < recipients.length; i++) {\\r\\n            address to = recipients[i];\\r\\n            require(to != address(0), \\\"SBTToken: Cannot mint to zero address\\\");\\r\\n            require(!hasTokenFromSession[to][sessionId], \\\"SBTToken: User already has token from this session\\\");\\r\\n\\r\\n            uint256 tokenId = _nextTokenId++;\\r\\n            tokenIds[i] = tokenId;\\r\\n\\r\\n            _safeMint(to, tokenId);\\r\\n\\r\\n            sbtData[tokenId] = SBTData({\\r\\n                name: template.name,\\r\\n                description: template.description,\\r\\n                issuer: msg.sender,\\r\\n                mintedAt: block.timestamp,\\r\\n                templateId: session.templateId,\\r\\n                sessionId: sessionId,\\r\\n                revoked: false\\r\\n            });\\r\\n\\r\\n            hasTokenFromSession[to][sessionId] = true;\\r\\n            hasTokenFromTemplate[to][session.templateId] = true;\\r\\n\\r\\n            emit SBTMinted(\\r\\n                to,\\r\\n                tokenId,\\r\\n                session.templateId,\\r\\n                sessionId,\\r\\n                msg.sender,\\r\\n                template.name,\\r\\n                template.description,\\r\\n                block.timestamp\\r\\n            );\\r\\n        }\\r\\n\\r\\n        // Update session mint count\\r\\n        for (uint256 i = 0; i < recipients.length; i++) {\\r\\n            sbtSession.incrementMintCount(sessionId);\\r\\n        }\\r\\n\\r\\n        emit BatchSBTMinted(recipients, tokenIds, session.templateId, sessionId, msg.sender, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Self-service claim SBT from a session (users can mint directly)\\r\\n     * @param sessionId Session ID to claim from\\r\\n     */\\r\\n    function claimFromSession(bytes32 sessionId) external whenNotPaused nonReentrant {\\r\\n        require(sbtSession.isSessionClaimable(sessionId), \\\"SBTToken: Session is not claimable\\\");\\r\\n        require(!hasTokenFromSession[msg.sender][sessionId], \\\"SBTToken: User already has token from this session\\\");\\r\\n\\r\\n        SBTSession.Session memory session = sbtSession.getSession(sessionId);\\r\\n        SBTTemplate.Template memory template = sbtTemplate.getTemplate(session.templateId);\\r\\n\\r\\n        uint256 tokenId = _nextTokenId++;\\r\\n\\r\\n        _safeMint(msg.sender, tokenId);\\r\\n\\r\\n        sbtData[tokenId] = SBTData({\\r\\n            name: template.name,\\r\\n            description: template.description,\\r\\n            issuer: session.issuer, // Keep original issuer from session\\r\\n            mintedAt: block.timestamp,\\r\\n            templateId: session.templateId,\\r\\n            sessionId: sessionId,\\r\\n            revoked: false\\r\\n        });\\r\\n\\r\\n        hasTokenFromSession[msg.sender][sessionId] = true;\\r\\n        hasTokenFromTemplate[msg.sender][session.templateId] = true;\\r\\n\\r\\n        // Increment session mint count\\r\\n        sbtSession.incrementMintCount(sessionId);\\r\\n\\r\\n        emit SBTMinted(\\r\\n            msg.sender,\\r\\n            tokenId,\\r\\n            session.templateId,\\r\\n            sessionId,\\r\\n            session.issuer, // Emit original issuer\\r\\n            template.name,\\r\\n            template.description,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Revoke an SBT (can only be done by issuer or owner)\\r\\n     * @param tokenId ID of the token to revoke\\r\\n     */\\r\\n    function revokeSBT(uint256 tokenId) external validToken(tokenId) whenNotPaused {\\r\\n        require(\\r\\n            msg.sender == sbtData[tokenId].issuer || msg.sender == owner(),\\r\\n            \\\"SBTToken: Not authorized to revoke\\\"\\r\\n        );\\r\\n\\r\\n        address tokenOwner = ownerOf(tokenId);\\r\\n        uint256 templateId = sbtData[tokenId].templateId;\\r\\n        bytes32 sessionId = sbtData[tokenId].sessionId;\\r\\n\\r\\n        sbtData[tokenId].revoked = true;\\r\\n        hasTokenFromTemplate[tokenOwner][templateId] = false;\\r\\n\\r\\n        if (sessionId != bytes32(0)) {\\r\\n            hasTokenFromSession[tokenOwner][sessionId] = false;\\r\\n        }\\r\\n\\r\\n        emit SBTRevoked(tokenId, msg.sender, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get all token IDs owned by an address\\r\\n     * @param owner Address to query\\r\\n     * @return uint256[] Array of token IDs\\r\\n     */\\r\\n    function getUserSBTs(address owner) external view returns (uint256[] memory) {\\r\\n        uint256 tokenCount = balanceOf(owner);\\r\\n        uint256[] memory tokenIds = new uint256[](tokenCount);\\r\\n\\r\\n        for (uint256 i = 0; i < tokenCount; i++) {\\r\\n            tokenIds[i] = tokenOfOwnerByIndex(owner, i);\\r\\n        }\\r\\n\\r\\n        return tokenIds;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get SBT information\\r\\n     * @param tokenId Token ID to query\\r\\n     * @return SBTData struct with all token information\\r\\n     */\\r\\n    function getSBTInfo(uint256 tokenId) external view returns (SBTData memory) {\\r\\n        require(_ownerOf(tokenId) != address(0), \\\"SBTToken: Token does not exist\\\");\\r\\n        return sbtData[tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get SBT basic info\\r\\n     * @param tokenId Token ID to query\\r\\n     * @return name Token name\\r\\n     * @return description Token description\\r\\n     * @return issuer Issuer address\\r\\n     * @return mintedAt Mint timestamp\\r\\n     * @return revoked Revocation status\\r\\n     */\\r\\n    function getSBTBasicInfo(uint256 tokenId) external view returns (\\r\\n        string memory name,\\r\\n        string memory description,\\r\\n        address issuer,\\r\\n        uint256 mintedAt,\\r\\n        bool revoked\\r\\n    ) {\\r\\n        require(_ownerOf(tokenId) != address(0), \\\"SBTToken: Token does not exist\\\");\\r\\n        SBTData memory data = sbtData[tokenId];\\r\\n        return (data.name, data.description, data.issuer, data.mintedAt, data.revoked);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Override transfer functions to make tokens non-transferable\\r\\n     */\\r\\n    function _update(address to, uint256 tokenId, address auth)\\r\\n        internal\\r\\n        override(ERC721, ERC721Enumerable)\\r\\n        returns (address)\\r\\n    {\\r\\n        address from = _ownerOf(tokenId);\\r\\n\\r\\n        // Allow minting (from == address(0)) and burning (to == address(0))\\r\\n        // Prevent all other transfers\\r\\n        if (from != address(0) && to != address(0)) {\\r\\n            revert(\\\"SBTToken: Soulbound tokens cannot be transferred\\\");\\r\\n        }\\r\\n\\r\\n        return super._update(to, tokenId, auth);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Override approve to prevent approvals\\r\\n     */\\r\\n    function approve(address, uint256) public pure override(ERC721, IERC721) {\\r\\n        revert(\\\"SBTToken: Soulbound tokens cannot be approved\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Override setApprovalForAll to prevent approvals\\r\\n     */\\r\\n    function setApprovalForAll(address, bool) public pure override(ERC721, IERC721) {\\r\\n        revert(\\\"SBTToken: Soulbound tokens cannot be approved\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Override getApproved to always return zero address\\r\\n     */\\r\\n    function getApproved(uint256) public pure override(ERC721, IERC721) returns (address) {\\r\\n        return address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Override isApprovedForAll to always return false\\r\\n     */\\r\\n    function isApprovedForAll(address, address) public pure override(ERC721, IERC721) returns (bool) {\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get next token ID\\r\\n     */\\r\\n    function getNextTokenId() external view returns (uint256) {\\r\\n        return _nextTokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Pause contract (only owner)\\r\\n     */\\r\\n    function pause() external onlyOwner {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Unpause contract (only owner)\\r\\n     */\\r\\n    function unpause() external onlyOwner {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    // Override required functions\\r\\n    function _increaseBalance(address account, uint128 value)\\r\\n        internal\\r\\n        override(ERC721, ERC721Enumerable)\\r\\n    {\\r\\n        super._increaseBalance(account, value);\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        override(ERC721, ERC721Enumerable)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return super.supportsInterface(interfaceId);\\r\\n    }\\r\\n}\",\"keccak256\":\"0xd779c81972e7d138696428e6a7c0f4c29eb8243e52be03f09f9d9a5f4ee7c12a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040526001600c553480156200001657600080fd5b5060405162004443380380620044438339810160408190526200003991620002a5565b836040518060400160405280600f81526020016e29b7bab63137bab732102a37b5b2b760891b8152506040518060400160405280600381526020016214d09560ea1b81525081600090816200008f9190620003a7565b5060016200009e8282620003a7565b5050506001600160a01b038116620000d157604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b620000dc8162000236565b50600a805460ff60a01b191690556001600b556001600160a01b038316620001525760405162461bcd60e51b815260206004820152602260248201527f534254546f6b656e3a20496e76616c6964207265676973747279206164647265604482015261737360f01b6064820152608401620000c8565b6001600160a01b038216620001b55760405162461bcd60e51b815260206004820152602260248201527f534254546f6b656e3a20496e76616c69642074656d706c617465206164647265604482015261737360f01b6064820152608401620000c8565b6001600160a01b038116620002175760405162461bcd60e51b815260206004820152602160248201527f534254546f6b656e3a20496e76616c69642073657373696f6e206164647265736044820152607360f81b6064820152608401620000c8565b6001600160a01b0392831660805290821660a0521660c0525062000473565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b80516001600160a01b0381168114620002a057600080fd5b919050565b60008060008060808587031215620002bc57600080fd5b620002c78562000288565b9350620002d76020860162000288565b9250620002e76040860162000288565b9150620002f76060860162000288565b905092959194509250565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200032d57607f821691505b6020821081036200034e57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620003a257600081815260208120601f850160051c810160208610156200037d5750805b601f850160051c820191505b818110156200039e5782815560010162000389565b5050505b505050565b81516001600160401b03811115620003c357620003c362000302565b620003db81620003d4845462000318565b8462000354565b602080601f831160018114620004135760008415620003fa5750858301515b600019600386901b1c1916600185901b1785556200039e565b600085815260208120601f198616915b82811015620004445788860151825594840194600190910190840162000423565b5085821015620004635787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a05160c051613f2262000521600039600081816103c10152818161091801528181610a0401528181610cc0015281816111640152818161120c015281816113050152818161179e015281816123a70152818161248a01526126f101526000818161044901528181610af9015281816113fd01528181611d2a01528181611e9201526125070152600081816104780152818161083d0152818161100c0152611c4f0152613f226000f3fe608060405234801561001057600080fd5b50600436106102275760003560e01c806370a0823111610130578063a22cb465116100b8578063caa0f92a1161007c578063caa0f92a14610528578063d7c2d72914610530578063e985e9c514610554578063f2fde38b1461056a578063fbd1ba211461057d57600080fd5b8063a22cb465146104b3578063a845be0d146104c1578063af7177e4146104ef578063b88d4fde14610502578063c87b56dd1461051557600080fd5b806380d6e3b1116100ff57806380d6e3b1146104445780638456cb591461046b5780638bfc1851146104735780638da5cb5b1461049a57806395d89b41146104ab57600080fd5b806370a08231146103e3578063715018a6146103f6578063776fafac146103fe5780637ef8c2e51461042457600080fd5b806337a28e3b116101b357806355a6dcb61161018257806355a6dcb6146103565780635c975abb146103845780635cf6c77b146103965780636352211e146103a957806369267fef146103bc57600080fd5b806337a28e3b146103155780633f4ba83a1461032857806342842e0e146103305780634f6ccce71461034357600080fd5b806318160ddd116101fa57806318160ddd146102aa57806323b872dd146102bc5780632ecd7444146102cf5780632f745c59146102ef57806330e9f9c11461030257600080fd5b806301ffc9a71461022c57806306fdde0314610254578063081812fc14610269578063095ea7b314610295575b600080fd5b61023f61023a3660046132eb565b610590565b60405190151581526020015b60405180910390f35b61025c6105a1565b60405161024b9190613358565b61027d61027736600461336b565b50600090565b6040516001600160a01b03909116815260200161024b565b6102a86102a3366004613399565b610633565b005b6008545b60405190815260200161024b565b6102a86102ca3660046133c5565b610696565b6102e26102dd366004613406565b610721565b60405161024b919061345e565b6102ae6102fd366004613399565b6107c3565b6102a8610310366004613399565b610828565b6102a861032336600461336b565b610d72565b6102a8610f6c565b6102a861033e3660046133c5565b610f7e565b6102ae61035136600461336b565b610f9e565b61023f610364366004613399565b600e60209081526000928352604080842090915290825290205460ff1681565b600a54600160a01b900460ff1661023f565b6102a86103a4366004613505565b610ff7565b61027d6103b736600461336b565b611870565b61027d7f000000000000000000000000000000000000000000000000000000000000000081565b6102ae6103f1366004613406565b61187b565b6102a86118c3565b61041161040c36600461336b565b6118d5565b60405161024b97969594939291906135bd565b61043761043236600461336b565b611a2d565b60405161024b9190613618565b61027d7f000000000000000000000000000000000000000000000000000000000000000081565b6102a8611c1b565b61027d7f000000000000000000000000000000000000000000000000000000000000000081565b600a546001600160a01b031661027d565b61025c611c2b565b6102a86102a33660046136a9565b61023f6104cf366004613399565b600f60209081526000928352604080842090915290825290205460ff1681565b6102a86104fd366004613399565b611c3a565b6102a861051036600461370a565b6120b8565b61025c61052336600461336b565b6120cf565b600c546102ae565b61054361053e36600461336b565b612144565b60405161024b9594939291906137b9565b61023f610562366004613807565b600092915050565b6102a8610578366004613406565b612343565b6102a861058b36600461336b565b612381565b600061059b826127a3565b92915050565b6060600080546105b090613835565b80601f01602080910402602001604051908101604052809291908181526020018280546105dc90613835565b80156106295780601f106105fe57610100808354040283529160200191610629565b820191906000526020600020905b81548152906001019060200180831161060c57829003601f168201915b5050505050905090565b60405162461bcd60e51b815260206004820152602d60248201527f534254546f6b656e3a20536f756c626f756e6420746f6b656e732063616e6e6f60448201526c1d08189948185c1c1c9bdd9959609a1b60648201526084015b60405180910390fd5b6001600160a01b0382166106c057604051633250574960e11b81526000600482015260240161068d565b60006106cd8383336127c8565b9050836001600160a01b0316816001600160a01b03161461071b576040516364283d7b60e01b81526001600160a01b038086166004830152602482018490528216604482015260640161068d565b50505050565b6060600061072e8361187b565b905060008167ffffffffffffffff81111561074b5761074b613471565b604051908082528060200260200182016040528015610774578160200160208202803683370190505b50905060005b828110156107bb5761078c85826107c3565b82828151811061079e5761079e61386f565b6020908102919091010152806107b38161389b565b91505061077a565b509392505050565b60006107ce8361187b565b82106107ff5760405163295f44f760e21b81526001600160a01b03841660048201526024810183905260440161068d565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6040516318dd0cb360e11b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906331ba196690602401602060405180830381865afa15801561088c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b091906138c4565b6108cc5760405162461bcd60e51b815260040161068d906138e1565b6108d4612871565b6108dc61289c565b6001600160a01b0382166109025760405162461bcd60e51b815260040161068d90613923565b60405163376c0f6560e11b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636ed81eca90602401602060405180830381865afa158015610967573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098b91906138c4565b6109a75760405162461bcd60e51b815260040161068d90613968565b6001600160a01b0382166000908152600f6020908152604080832084845290915290205460ff16156109eb5760405162461bcd60e51b815260040161068d906139aa565b6040516339b240bd60e01b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906339b240bd90602401600060405180830381865afa158015610a53573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a7b9190810190613a4c565b60a08101519091506001600160a01b03163314610ada5760405162461bcd60e51b815260206004820152601b60248201527f534254546f6b656e3a204e6f742073657373696f6e206f776e65720000000000604482015260640161068d565b6020810151604051630c550f3d60e21b81526000916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916331543cf491610b309160040190815260200190565b600060405180830381865afa158015610b4d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b759190810190613b0e565b600c80549192506000919082610b8a8361389b565b919050559050610b9a85826128c6565b6040805160e08101825260208085015182528483015181830152338284015242606083015285810151608083015260a08201879052600060c08301819052848152600d9091529190912081518190610bf29082613c23565b5060208201516001820190610c079082613c23565b506040828101516002830180546001600160a01b039283166001600160a01b031990911617905560608401516003840155608084015160048085019190915560a0850151600585015560c0909401516006909301805493151560ff199485161790558881166000818152600f60209081528482208b83528152848220805487166001908117909155928252600e81528482208a8201518352905283902080549094161790925551636d37515560e11b81529182018690527f0000000000000000000000000000000000000000000000000000000000000000169063da6ea2aa90602401600060405180830381600087803b158015610d0457600080fd5b505af1158015610d18573d6000803e3d6000fd5b50505050826020015181866001600160a01b0316600080516020613ecd83398151915287338760200151886040015142604051610d59959493929190613ce3565b60405180910390a4505050610d6e6001600b55565b5050565b60008181526002602052604090205481906001600160a01b0316610da85760405162461bcd60e51b815260040161068d90613d32565b6000818152600d602052604090206006015460ff1615610e0a5760405162461bcd60e51b815260206004820181905260248201527f534254546f6b656e3a20546f6b656e20686173206265656e207265766f6b6564604482015260640161068d565b610e12612871565b6000828152600d60205260409020600201546001600160a01b0316331480610e445750600a546001600160a01b031633145b610e9b5760405162461bcd60e51b815260206004820152602260248201527f534254546f6b656e3a204e6f7420617574686f72697a656420746f207265766f6044820152616b6560f01b606482015260840161068d565b6000610ea683611870565b6000848152600d60209081526040808320600481015460058201546006909201805460ff199081166001179091556001600160a01b0387168652600e85528386208287529094529190932080549092169091559192508015610f2e576001600160a01b0383166000908152600f602090815260408083208484529091529020805460ff191690555b604051428152339086907ffab34fd9b450b5a4506a88e4c9007da05e474185d1aa25d3306e5b2ef1b2b0419060200160405180910390a35050505050565b610f746128e0565b610f7c61290d565b565b610f99838383604051806020016040528060008152506120b8565b505050565b6000610fa960085490565b8210610fd25760405163295f44f760e21b8152600060048201526024810183905260440161068d565b60088281548110610fe557610fe561386f565b90600052602060002001549050919050565b6040516318dd0cb360e11b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906331ba196690602401602060405180830381865afa15801561105b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107f91906138c4565b61109b5760405162461bcd60e51b815260040161068d906138e1565b6110a3612871565b6110ab61289c565b60008251116110fc5760405162461bcd60e51b815260206004820181905260248201527f534254546f6b656e3a20456d70747920726563697069656e7473206172726179604482015260640161068d565b60648251111561114e5760405162461bcd60e51b815260206004820152601e60248201527f534254546f6b656e3a2042617463682073697a6520746f6f206c617267650000604482015260640161068d565b60405163376c0f6560e11b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636ed81eca90602401602060405180830381865afa1580156111b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d791906138c4565b6111f35760405162461bcd60e51b815260040161068d90613968565b6040516339b240bd60e01b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906339b240bd90602401600060405180830381865afa15801561125b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112839190810190613a4c565b60a08101519091506001600160a01b031633146112e25760405162461bcd60e51b815260206004820152601b60248201527f534254546f6b656e3a204e6f742073657373696f6e206f776e65720000000000604482015260640161068d565b60405163db67dcc760e01b81526004810183905260009081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063db67dcc790602401608060405180830381865afa15801561134c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113709190613d69565b505091509150808551836113849190613d9f565b11156113de5760405162461bcd60e51b8152602060048201526024808201527f534254546f6b656e3a20457863656564732073657373696f6e206d696e74206c6044820152631a5b5a5d60e21b606482015260840161068d565b6020830151604051630c550f3d60e21b81526000916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916331543cf4916114349160040190815260200190565b600060405180830381865afa158015611451573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114799190810190613b0e565b90506000865167ffffffffffffffff81111561149757611497613471565b6040519080825280602002602001820160405280156114c0578160200160208202803683370190505b50905060005b875181101561177b5760008882815181106114e3576114e361386f565b6020026020010151905060006001600160a01b0316816001600160a01b03160361151f5760405162461bcd60e51b815260040161068d90613923565b6001600160a01b0381166000908152600f602090815260408083208b845290915290205460ff16156115635760405162461bcd60e51b815260040161068d906139aa565b600c8054600091826115748361389b565b9190505590508084848151811061158d5761158d61386f565b6020026020010181815250506115a382826128c6565b6040805160e0810182526020808801518252878301518183015233828401524260608301528a810151608083015260a082018c9052600060c08301819052848152600d90915291909120815181906115fb9082613c23565b50602082015160018201906116109082613c23565b5060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550606082015181600301556080820151816004015560a0820151816005015560c08201518160060160006101000a81548160ff0219169083151502179055509050506001600f6000846001600160a01b03166001600160a01b0316815260200190815260200160002060008b815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600e6000846001600160a01b03166001600160a01b0316815260200190815260200160002060008a60200151815260200190815260200160002060006101000a81548160ff021916908315150217905550876020015181836001600160a01b0316600080516020613ecd8339815191528c338a602001518b604001514260405161175e959493929190613ce3565b60405180910390a4505080806117739061389b565b9150506114c6565b5060005b875181101561181557604051636d37515560e11b8152600481018890527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063da6ea2aa90602401600060405180830381600087803b1580156117ea57600080fd5b505af11580156117fe573d6000803e3d6000fd5b50505050808061180d9061389b565b91505061177f565b50336001600160a01b03168686602001517fb4dd71f324962c2514f3a37597443b86dad19f051b656bb20827b4841d88eae08a854260405161185993929190613db2565b60405180910390a45050505050610d6e6001600b55565b600061059b82612962565b60006001600160a01b0382166118a7576040516322718ad960e21b81526000600482015260240161068d565b506001600160a01b031660009081526003602052604090205490565b6118cb6128e0565b610f7c600061299b565b600d602052600090815260409020805481906118f090613835565b80601f016020809104026020016040519081016040528092919081815260200182805461191c90613835565b80156119695780601f1061193e57610100808354040283529160200191611969565b820191906000526020600020905b81548152906001019060200180831161194c57829003601f168201915b50505050509080600101805461197e90613835565b80601f01602080910402602001604051908101604052809291908181526020018280546119aa90613835565b80156119f75780601f106119cc576101008083540402835291602001916119f7565b820191906000526020600020905b8154815290600101906020018083116119da57829003601f168201915b505050600284015460038501546004860154600587015460069097015495966001600160a01b0390931695919450925060ff1687565b6040805160e0810182526060808252602080830182905260008385018190529183018290526080830182905260a0830182905260c083018290528482526002905291909120546001600160a01b0316611a985760405162461bcd60e51b815260040161068d90613d32565b6000828152600d602052604090819020815160e08101909252805482908290611ac090613835565b80601f0160208091040260200160405190810160405280929190818152602001828054611aec90613835565b8015611b395780601f10611b0e57610100808354040283529160200191611b39565b820191906000526020600020905b815481529060010190602001808311611b1c57829003601f168201915b50505050508152602001600182018054611b5290613835565b80601f0160208091040260200160405190810160405280929190818152602001828054611b7e90613835565b8015611bcb5780601f10611ba057610100808354040283529160200191611bcb565b820191906000526020600020905b815481529060010190602001808311611bae57829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260069091015460ff16151560a09091015292915050565b611c236128e0565b610f7c6129ed565b6060600180546105b090613835565b6040516318dd0cb360e11b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906331ba196690602401602060405180830381865afa158015611c9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc291906138c4565b611cde5760405162461bcd60e51b815260040161068d906138e1565b611ce6612871565b611cee61289c565b6001600160a01b038216611d145760405162461bcd60e51b815260040161068d90613923565b60405163e0a0d93360e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e0a0d93390602401602060405180830381865afa158015611d79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d9d91906138c4565b611de95760405162461bcd60e51b815260206004820181905260248201527f534254546f6b656e3a2054656d706c617465206973206e6f7420616374697665604482015260640161068d565b6001600160a01b0382166000908152600e6020908152604080832084845290915290205460ff1615611e795760405162461bcd60e51b815260206004820152603360248201527f534254546f6b656e3a205573657220616c72656164792068617320746f6b656e6044820152722066726f6d20746869732074656d706c61746560681b606482015260840161068d565b604051630c550f3d60e21b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906331543cf490602401600060405180830381865afa158015611ee1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611f099190810190613b0e565b60608101519091506001600160a01b03163314611f685760405162461bcd60e51b815260206004820152601c60248201527f534254546f6b656e3a204e6f742074656d706c617465206f776e657200000000604482015260640161068d565b600c805460009182611f798361389b565b919050559050611f8984826128c6565b6040805160e08101825260208085015182528483015181830152338284015242606083015260808201869052600060a0830181905260c08301819052848152600d9091529190912081518190611fdf9082613c23565b5060208201516001820190611ff49082613c23565b506040828101516002830180546001600160a01b039283166001600160a01b0319909116179055606084015160038401556080840151600484015560a0840151600584015560c0909301516006909201805492151560ff199384161790559186166000818152600e6020908152848220888352815284822080549094166001179093559185015185840151935187948694600080516020613ecd833981519152936120a493919233924290613ce3565b60405180910390a45050610d6e6001600b55565b6120c3848484610696565b61071b84848484612a30565b60606120da82612962565b5060006120f260408051602081019091526000815290565b90506000815111612112576040518060200160405280600081525061213d565b8061211c84612b59565b60405160200161212d929190613e1a565b6040516020818303038152906040525b9392505050565b606080600080808061216b876000908152600260205260409020546001600160a01b031690565b6001600160a01b0316036121915760405162461bcd60e51b815260040161068d90613d32565b6000868152600d6020526040808220815160e081019092528054829082906121b890613835565b80601f01602080910402602001604051908101604052809291908181526020018280546121e490613835565b80156122315780601f1061220657610100808354040283529160200191612231565b820191906000526020600020905b81548152906001019060200180831161221457829003601f168201915b5050505050815260200160018201805461224a90613835565b80601f016020809104026020016040519081016040528092919081815260200182805461227690613835565b80156122c35780601f10612298576101008083540402835291602001916122c3565b820191906000526020600020905b8154815290600101906020018083116122a657829003601f168201915b505050918352505060028201546001600160a01b0316602080830191909152600383015460408084019190915260048401546060808501919091526005850154608085015260069094015460ff16151560a090930192909252835190840151918401519284015160c090940151909b919a50919850919650945092505050565b61234b6128e0565b6001600160a01b03811661237557604051631e4fbdf760e01b81526000600482015260240161068d565b61237e8161299b565b50565b612389612871565b61239161289c565b60405163376c0f6560e11b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636ed81eca90602401602060405180830381865afa1580156123f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061241a91906138c4565b6124365760405162461bcd60e51b815260040161068d90613968565b336000908152600f6020908152604080832084845290915290205460ff16156124715760405162461bcd60e51b815260040161068d906139aa565b6040516339b240bd60e01b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906339b240bd90602401600060405180830381865afa1580156124d9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526125019190810190613a4c565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166331543cf483602001516040518263ffffffff1660e01b815260040161255791815260200190565b600060405180830381865afa158015612574573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261259c9190810190613b0e565b600c805491925060009190826125b18361389b565b9190505590506125c133826128c6565b6040805160e0810182526020808501518252848301518183015260a0808701516001600160a01b0316838501524260608401528682015160808401528201879052600060c08301819052848152600d90915291909120815181906126259082613c23565b506020820151600182019061263a9082613c23565b506040828101516002830180546001600160a01b039283166001600160a01b031990911617905560608401516003840155608084015160048085019190915560a0850151600585015560c0909401516006909301805493151560ff19948516179055336000818152600f60209081528482208b83528152848220805487166001908117909155928252600e81528482208a8201518352905283902080549094161790925551636d37515560e11b81529182018690527f0000000000000000000000000000000000000000000000000000000000000000169063da6ea2aa90602401600060405180830381600087803b15801561273557600080fd5b505af1158015612749573d6000803e3d6000fd5b50505050826020015181336001600160a01b0316600080516020613ecd833981519152878760a00151876020015188604001514260405161278e959493929190613ce3565b60405180910390a450505061237e6001600b55565b60006001600160e01b0319821663780e9d6360e01b148061059b575061059b82612bec565b6000828152600260205260408120546001600160a01b031680158015906127f757506001600160a01b03851615155b1561285d5760405162461bcd60e51b815260206004820152603060248201527f534254546f6b656e3a20536f756c626f756e6420746f6b656e732063616e6e6f60448201526f1d081899481d1c985b9cd9995c9c995960821b606482015260840161068d565b612868858585612c3c565b95945050505050565b600a54600160a01b900460ff1615610f7c5760405163d93c066560e01b815260040160405180910390fd5b6002600b54036128bf57604051633ee5aeb560e01b815260040160405180910390fd5b6002600b55565b610d6e828260405180602001604052806000815250612d11565b600a546001600160a01b03163314610f7c5760405163118cdaa760e01b815233600482015260240161068d565b612915612d28565b600a805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6000818152600260205260408120546001600160a01b03168061059b57604051637e27328960e01b81526004810184905260240161068d565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6129f5612871565b600a805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586129453390565b6001600160a01b0383163b1561071b57604051630a85bd0160e11b81526001600160a01b0384169063150b7a0290612a72903390889087908790600401613e49565b6020604051808303816000875af1925050508015612aad575060408051601f3d908101601f19168201909252612aaa91810190613e86565b60015b612b16573d808015612adb576040519150601f19603f3d011682016040523d82523d6000602084013e612ae0565b606091505b508051600003612b0e57604051633250574960e11b81526001600160a01b038516600482015260240161068d565b805181602001fd5b6001600160e01b03198116630a85bd0160e11b14612b5257604051633250574960e11b81526001600160a01b038516600482015260240161068d565b5050505050565b60606000612b6683612d52565b600101905060008167ffffffffffffffff811115612b8657612b86613471565b6040519080825280601f01601f191660200182016040528015612bb0576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084612bba57509392505050565b60006001600160e01b031982166380ac58cd60e01b1480612c1d57506001600160e01b03198216635b5e139f60e01b145b8061059b57506301ffc9a760e01b6001600160e01b031983161461059b565b600080612c4a858585612e2a565b90506001600160a01b038116612ca757612ca284600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b612cca565b846001600160a01b0316816001600160a01b031614612cca57612cca8185612f23565b6001600160a01b038516612ce657612ce184612fb4565b612d09565b846001600160a01b0316816001600160a01b031614612d0957612d098585613063565b949350505050565b612d1b83836130b3565b610f996000848484612a30565b600a54600160a01b900460ff16610f7c57604051638dfc202b60e01b815260040160405180910390fd5b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310612d915772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310612dbd576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310612ddb57662386f26fc10000830492506010015b6305f5e1008310612df3576305f5e100830492506008015b6127108310612e0757612710830492506004015b60648310612e19576064830492506002015b600a831061059b5760010192915050565b6000828152600260205260408120546001600160a01b0390811690831615612e5757612e57818486613118565b6001600160a01b03811615612e9557612e7460008560008061317c565b6001600160a01b038116600090815260036020526040902080546000190190555b6001600160a01b03851615612ec4576001600160a01b0385166000908152600360205260409020805460010190555b60008481526002602052604080822080546001600160a01b0319166001600160a01b0389811691821790925591518793918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4949350505050565b6000612f2e8361187b565b600083815260076020526040902054909150808214612f81576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090612fc690600190613ea3565b60008381526009602052604081205460088054939450909284908110612fee57612fee61386f565b90600052602060002001549050806008838154811061300f5761300f61386f565b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061304757613047613eb6565b6001900381819060005260206000200160009055905550505050565b600060016130708461187b565b61307a9190613ea3565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6001600160a01b0382166130dd57604051633250574960e11b81526000600482015260240161068d565b60006130eb838360006127c8565b90506001600160a01b03811615610f99576040516339e3563760e11b81526000600482015260240161068d565b613123838383613279565b610f99576001600160a01b03831661315157604051637e27328960e01b81526004810182905260240161068d565b60405163177e802f60e01b81526001600160a01b03831660048201526024810182905260440161068d565b808061319057506001600160a01b03821615155b156132495760006131a084612962565b90506001600160a01b038316158015906131cc5750826001600160a01b0316816001600160a01b031614155b80156131d6575060015b156131ff5760405163a9fbf51f60e01b81526001600160a01b038416600482015260240161068d565b81156132475783856001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b5050600090815260046020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160a01b03831615801590612d095750826001600160a01b0316846001600160a01b031614806132ac575060005b80612d095750506000908152600460205260409020546001600160a01b03908116911614919050565b6001600160e01b03198116811461237e57600080fd5b6000602082840312156132fd57600080fd5b813561213d816132d5565b60005b8381101561332357818101518382015260200161330b565b50506000910152565b60008151808452613344816020860160208601613308565b601f01601f19169290920160200192915050565b60208152600061213d602083018461332c565b60006020828403121561337d57600080fd5b5035919050565b6001600160a01b038116811461237e57600080fd5b600080604083850312156133ac57600080fd5b82356133b781613384565b946020939093013593505050565b6000806000606084860312156133da57600080fd5b83356133e581613384565b925060208401356133f581613384565b929592945050506040919091013590565b60006020828403121561341857600080fd5b813561213d81613384565b600081518084526020808501945080840160005b8381101561345357815187529582019590820190600101613437565b509495945050505050565b60208152600061213d6020830184613423565b634e487b7160e01b600052604160045260246000fd5b604051610100810167ffffffffffffffff811182821017156134ab576134ab613471565b60405290565b60405160c0810167ffffffffffffffff811182821017156134ab576134ab613471565b604051601f8201601f1916810167ffffffffffffffff811182821017156134fd576134fd613471565b604052919050565b6000806040838503121561351857600080fd5b823567ffffffffffffffff8082111561353057600080fd5b818501915085601f83011261354457600080fd5b813560208282111561355857613558613471565b8160051b92506135698184016134d4565b828152928401810192818101908985111561358357600080fd5b948201945b848610156135ad578535935061359d84613384565b8382529482019490820190613588565b9997909101359750505050505050565b60e0815260006135d060e083018a61332c565b82810360208401526135e2818a61332c565b6001600160a01b0398909816604084015250506060810194909452608084019290925260a0830152151560c09091015292915050565b602081526000825160e0602084015261363561010084018261332c565b90506020840151601f19848303016040850152613652828261332c565b91505060018060a01b03604085015116606084015260608401516080840152608084015160a084015260a084015160c084015260c0840151151560e08401528091505092915050565b801515811461237e57600080fd5b600080604083850312156136bc57600080fd5b82356136c781613384565b915060208301356136d78161369b565b809150509250929050565b600067ffffffffffffffff8211156136fc576136fc613471565b50601f01601f191660200190565b6000806000806080858703121561372057600080fd5b843561372b81613384565b9350602085013561373b81613384565b925060408501359150606085013567ffffffffffffffff81111561375e57600080fd5b8501601f8101871361376f57600080fd5b803561378261377d826136e2565b6134d4565b81815288602083850101111561379757600080fd5b8160208401602083013760006020838301015280935050505092959194509250565b60a0815260006137cc60a083018861332c565b82810360208401526137de818861332c565b6001600160a01b0396909616604084015250506060810192909252151560809091015292915050565b6000806040838503121561381a57600080fd5b823561382581613384565b915060208301356136d781613384565b600181811c9082168061384957607f821691505b60208210810361386957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016138ad576138ad613885565b5060010190565b80516138bf8161369b565b919050565b6000602082840312156138d657600080fd5b815161213d8161369b565b60208082526022908201527f534254546f6b656e3a204e6f7420616e20617574686f72697a6564206973737560408201526132b960f11b606082015260800190565b60208082526025908201527f534254546f6b656e3a2043616e6e6f74206d696e7420746f207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526022908201527f534254546f6b656e3a2053657373696f6e206973206e6f7420636c61696d61626040820152616c6560f01b606082015260800190565b60208082526032908201527f534254546f6b656e3a205573657220616c72656164792068617320746f6b656e60408201527110333937b6903a3434b99039b2b9b9b4b7b760711b606082015260800190565b80516138bf81613384565b600082601f830112613a1857600080fd5b8151613a2661377d826136e2565b818152846020838601011115613a3b57600080fd5b612d09826020830160208701613308565b600060208284031215613a5e57600080fd5b815167ffffffffffffffff80821115613a7657600080fd5b908301906101008286031215613a8b57600080fd5b613a93613487565b8251815260208301516020820152604083015160408201526060830151606082015260808301516080820152613acb60a084016139fc565b60a0820152613adc60c084016138b4565b60c082015260e083015182811115613af357600080fd5b613aff87828601613a07565b60e08301525095945050505050565b600060208284031215613b2057600080fd5b815167ffffffffffffffff80821115613b3857600080fd5b9083019060c08286031215613b4c57600080fd5b613b546134b1565b82518152602083015182811115613b6a57600080fd5b613b7687828601613a07565b602083015250604083015182811115613b8e57600080fd5b613b9a87828601613a07565b604083015250613bac606084016139fc565b606082015260808301516080820152613bc760a084016138b4565b60a082015295945050505050565b601f821115610f9957600081815260208120601f850160051c81016020861015613bfc5750805b601f850160051c820191505b81811015613c1b57828155600101613c08565b505050505050565b815167ffffffffffffffff811115613c3d57613c3d613471565b613c5181613c4b8454613835565b84613bd5565b602080601f831160018114613c865760008415613c6e5750858301515b600019600386901b1c1916600185901b178555613c1b565b600085815260208120601f198616915b82811015613cb557888601518255948401946001909101908401613c96565b5085821015613cd35787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8581526001600160a01b038516602082015260a060408201819052600090613d0d9083018661332c565b8281036060840152613d1f818661332c565b9150508260808301529695505050505050565b6020808252601e908201527f534254546f6b656e3a20546f6b656e20646f6573206e6f742065786973740000604082015260600190565b60008060008060808587031215613d7f57600080fd5b505082516020840151604085015160609095015191969095509092509050565b8082018082111561059b5761059b613885565b606080825284519082018190526000906020906080840190828801845b82811015613df45781516001600160a01b031684529284019290840190600101613dcf565b50505083810382850152613e088187613423565b92505050826040830152949350505050565b60008351613e2c818460208801613308565b835190830190613e40818360208801613308565b01949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613e7c9083018461332c565b9695505050505050565b600060208284031215613e9857600080fd5b815161213d816132d5565b8181038181111561059b5761059b613885565b634e487b7160e01b600052603160045260246000fdfed723ee64f1a389beca1041351bba4b2b1f6c668565b0ba5f4efb9b59a964bb80a26469706673582212209b1afb64ca8c7fd574a21ece5af11f6d4e26a74c4b5d6462760ab84c0d8a397064736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "SBT System POC",
    "details": "Soulbound Token (Non-transferable ERC721) implementation with template and session-based minting",
    "errors": {
      "ERC721EnumerableForbiddenBatchMint()": [
        {
          "details": "Batch mint is not allowed."
        }
      ],
      "ERC721IncorrectOwner(address,uint256,address)": [
        {
          "details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
          "params": {
            "owner": "Address of the current owner of a token.",
            "sender": "Address whose tokens are being transferred.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC721InsufficientApproval(address,uint256)": [
        {
          "details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC721InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC721InvalidOperator(address)": [
        {
          "details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC721InvalidOwner(address)": [
        {
          "details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.",
          "params": {
            "owner": "Address of the current owner of a token."
          }
        }
      ],
      "ERC721InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC721InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC721NonexistentToken(uint256)": [
        {
          "details": "Indicates a `tokenId` whose `owner` is the zero address.",
          "params": {
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC721OutOfBoundsIndex(address,uint256)": [
        {
          "details": "An `owner`'s token query was out of bounds for `index`. NOTE: The owner being `address(0)` indicates a global out of bounds index."
        }
      ],
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "Override approve to prevent approvals"
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "batchMintFromSession(address[],bytes32)": {
        "details": "Batch mint SBTs from a session to multiple recipients",
        "params": {
          "recipients": "Array of recipient addresses",
          "sessionId": "Session ID to mint from"
        }
      },
      "claimFromSession(bytes32)": {
        "details": "Self-service claim SBT from a session (users can mint directly)",
        "params": {
          "sessionId": "Session ID to claim from"
        }
      },
      "getApproved(uint256)": {
        "details": "Override getApproved to always return zero address"
      },
      "getNextTokenId()": {
        "details": "Get next token ID"
      },
      "getSBTBasicInfo(uint256)": {
        "details": "Get SBT basic info",
        "params": {
          "tokenId": "Token ID to query"
        },
        "returns": {
          "description": "Token description",
          "issuer": "Issuer address",
          "mintedAt": "Mint timestamp",
          "name": "Token name",
          "revoked": "Revocation status"
        }
      },
      "getSBTInfo(uint256)": {
        "details": "Get SBT information",
        "params": {
          "tokenId": "Token ID to query"
        },
        "returns": {
          "_0": "SBTData struct with all token information"
        }
      },
      "getUserSBTs(address)": {
        "details": "Get all token IDs owned by an address",
        "params": {
          "owner": "Address to query"
        },
        "returns": {
          "_0": "uint256[] Array of token IDs"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "Override isApprovedForAll to always return false"
      },
      "mintFromSession(address,bytes32)": {
        "details": "Mint SBT from a session (for QR code claims)",
        "params": {
          "sessionId": "Session ID to mint from",
          "to": "Address of the recipient"
        }
      },
      "mintFromTemplate(address,uint256)": {
        "details": "Mint SBT from a template (direct minting by issuer)",
        "params": {
          "templateId": "Template ID to mint from",
          "to": "Address of the recipient"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "pause()": {
        "details": "Pause contract (only owner)"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "revokeSBT(uint256)": {
        "details": "Revoke an SBT (can only be done by issuer or owner)",
        "params": {
          "tokenId": "ID of the token to revoke"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "Override setApprovalForAll to prevent approvals"
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Unpause contract (only owner)"
      }
    },
    "title": "SBTToken",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 317,
        "contract": "contracts/SBTToken.sol:SBTToken",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 319,
        "contract": "contracts/SBTToken.sol:SBTToken",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 323,
        "contract": "contracts/SBTToken.sol:SBTToken",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 327,
        "contract": "contracts/SBTToken.sol:SBTToken",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 331,
        "contract": "contracts/SBTToken.sol:SBTToken",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 337,
        "contract": "contracts/SBTToken.sol:SBTToken",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1447,
        "contract": "contracts/SBTToken.sol:SBTToken",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1451,
        "contract": "contracts/SBTToken.sol:SBTToken",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1454,
        "contract": "contracts/SBTToken.sol:SBTToken",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1458,
        "contract": "contracts/SBTToken.sol:SBTToken",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 8,
        "contract": "contracts/SBTToken.sol:SBTToken",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 1911,
        "contract": "contracts/SBTToken.sol:SBTToken",
        "label": "_paused",
        "offset": 20,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 2030,
        "contract": "contracts/SBTToken.sol:SBTToken",
        "label": "_status",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 5145,
        "contract": "contracts/SBTToken.sol:SBTToken",
        "label": "_nextTokenId",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 5150,
        "contract": "contracts/SBTToken.sol:SBTToken",
        "label": "sbtData",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_struct(SBTData)5133_storage)"
      },
      {
        "astId": 5156,
        "contract": "contracts/SBTToken.sol:SBTToken",
        "label": "hasTokenFromTemplate",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 5162,
        "contract": "contracts/SBTToken.sol:SBTToken",
        "label": "hasTokenFromSession",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(SBTData)5133_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SBTToken.SBTData)",
        "numberOfBytes": "32",
        "value": "t_struct(SBTData)5133_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(SBTData)5133_storage": {
        "encoding": "inplace",
        "label": "struct SBTToken.SBTData",
        "members": [
          {
            "astId": 5120,
            "contract": "contracts/SBTToken.sol:SBTToken",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 5122,
            "contract": "contracts/SBTToken.sol:SBTToken",
            "label": "description",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 5124,
            "contract": "contracts/SBTToken.sol:SBTToken",
            "label": "issuer",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 5126,
            "contract": "contracts/SBTToken.sol:SBTToken",
            "label": "mintedAt",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5128,
            "contract": "contracts/SBTToken.sol:SBTToken",
            "label": "templateId",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5130,
            "contract": "contracts/SBTToken.sol:SBTToken",
            "label": "sessionId",
            "offset": 0,
            "slot": "5",
            "type": "t_bytes32"
          },
          {
            "astId": 5132,
            "contract": "contracts/SBTToken.sol:SBTToken",
            "label": "revoked",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
{
  "address": "0xFB1FF20107a62fE550d83ACa4E4Bf460dD77a944",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "organization",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "IssuerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "IssuerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "organization",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "IssuerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "organization",
          "type": "string"
        }
      ],
      "name": "addIssuer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllIssuers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAuthorizedIssuerCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        }
      ],
      "name": "getIssuerInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "organization",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "authorized",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "addedAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct IssuerRegistry.IssuerInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        }
      ],
      "name": "isAuthorizedIssuer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "issuerAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        }
      ],
      "name": "removeIssuer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "organization",
          "type": "string"
        }
      ],
      "name": "updateIssuer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x66c746f7417fe151fe5bd08deb24d990b100a6e319e312afc954a1b5ab13be95",
  "receipt": {
    "to": null,
    "from": "0xd82c3510567ce848DfcAD32b7e69877C0f66D9b1",
    "contractAddress": "0xFB1FF20107a62fE550d83ACa4E4Bf460dD77a944",
    "transactionIndex": 4,
    "gasUsed": "1243490",
    "logsBloom": "0x
    "blockHash": "0x8fcd14be822660830a5da5683922230a8a769fc03cb8219988d6c6edfec257c6",
    "transactionHash": "0x66c746f7417fe151fe5bd08deb24d990b100a6e319e312afc954a1b5ab13be95",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 38294493,
        "transactionHash": "0x66c746f7417fe151fe5bd08deb24d990b100a6e319e312afc954a1b5ab13be95",
        "address": "0xFB1FF20107a62fE550d83ACa4E4Bf460dD77a944",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d82c3510567ce848dfcad32b7e69877c0f66d9b1"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x8fcd14be822660830a5da5683922230a8a769fc03cb8219988d6c6edfec257c6"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 38294493,
        "transactionHash": "0x66c746f7417fe151fe5bd08deb24d990b100a6e319e312afc954a1b5ab13be95",
        "address": "0xFB1FF20107a62fE550d83ACa4E4Bf460dD77a944",
        "topics": [
          "0x2a1e6846aed5ec6606346a918a5642662454a6bb83024c1bcbd7dd4c6f1dd884",
          "0x000000000000000000000000d82c3510567ce848dfcad32b7e69877c0f66d9b1"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000068ce572f000000000000000000000000000000000000000000000000000000000000000c53797374656d2041646d696e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a5342542053797374656d00000000000000000000000000000000000000000000",
        "logIndex": 5,
        "blockHash": "0x8fcd14be822660830a5da5683922230a8a769fc03cb8219988d6c6edfec257c6"
      }
    ],
    "blockNumber": 38294493,
    "cumulativeGasUsed": "6783158",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd82c3510567ce848DfcAD32b7e69877C0f66D9b1"
  ],
  "numDeployments": 1,
  "solcInputHash": "3572b12dc14bcaf61ff1890999048189",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"organization\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"IssuerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"IssuerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"organization\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"IssuerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"organization\",\"type\":\"string\"}],\"name\":\"addIssuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllIssuers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuthorizedIssuerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"}],\"name\":\"getIssuerInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"organization\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"authorized\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"addedAt\",\"type\":\"uint256\"}],\"internalType\":\"struct IssuerRegistry.IssuerInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"}],\"name\":\"isAuthorizedIssuer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"issuerAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"}],\"name\":\"removeIssuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"organization\",\"type\":\"string\"}],\"name\":\"updateIssuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"SBT System POC\",\"details\":\"Contract to manage authorized SBT issuers\",\"errors\":{\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"addIssuer(address,string,string)\":{\"details\":\"Add a new authorized issuer\",\"params\":{\"issuer\":\"Address of the issuer\",\"name\":\"Name of the issuer\",\"organization\":\"Organization name\"}},\"getAllIssuers()\":{\"details\":\"Get all authorized issuer addresses\",\"returns\":{\"_0\":\"address[] Array of all issuer addresses\"}},\"getAuthorizedIssuerCount()\":{\"details\":\"Get total count of authorized issuers\",\"returns\":{\"_0\":\"uint256 Count of authorized issuers\"}},\"getIssuerInfo(address)\":{\"details\":\"Get issuer information\",\"params\":{\"issuer\":\"Address of the issuer\"},\"returns\":{\"_0\":\"IssuerInfo struct containing issuer details\"}},\"isAuthorizedIssuer(address)\":{\"details\":\"Check if an address is an authorized issuer\",\"params\":{\"issuer\":\"Address to check\"},\"returns\":{\"_0\":\"bool True if authorized, false otherwise\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Pause the contract\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"removeIssuer(address)\":{\"details\":\"Remove an authorized issuer\",\"params\":{\"issuer\":\"Address of the issuer to remove\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Unpause the contract\"},\"updateIssuer(address,string,string)\":{\"details\":\"Update issuer information\",\"params\":{\"issuer\":\"Address of the issuer\",\"name\":\"New name\",\"organization\":\"New organization\"}}},\"title\":\"IssuerRegistry\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IssuerRegistry.sol\":\"IssuerRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd\",\"license\":\"MIT\"},\"contracts/IssuerRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IssuerRegistry\\r\\n * @dev Contract to manage authorized SBT issuers\\r\\n * @author SBT System POC\\r\\n */\\r\\ncontract IssuerRegistry is Ownable, Pausable {\\r\\n    struct IssuerInfo {\\r\\n        string name;\\r\\n        string organization;\\r\\n        bool authorized;\\r\\n        uint256 addedAt;\\r\\n    }\\r\\n\\r\\n    // Mapping from issuer address to issuer info\\r\\n    mapping(address => IssuerInfo) private issuers;\\r\\n\\r\\n    // Array to track all issuer addresses for enumeration\\r\\n    address[] public issuerAddresses;\\r\\n\\r\\n    // Mapping to track if address is in the array (for gas optimization)\\r\\n    mapping(address => bool) private isInArray;\\r\\n\\r\\n    // Events\\r\\n    event IssuerAdded(\\r\\n        address indexed issuer,\\r\\n        string name,\\r\\n        string organization,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    event IssuerRemoved(\\r\\n        address indexed issuer,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    event IssuerUpdated(\\r\\n        address indexed issuer,\\r\\n        string name,\\r\\n        string organization,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    constructor(address _owner) Ownable(_owner) {\\r\\n        // Add the owner as the first authorized issuer\\r\\n        _addIssuerInternal(_owner, \\\"System Admin\\\", \\\"SBT System\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a new authorized issuer\\r\\n     * @param issuer Address of the issuer\\r\\n     * @param name Name of the issuer\\r\\n     * @param organization Organization name\\r\\n     */\\r\\n    function addIssuer(\\r\\n        address issuer,\\r\\n        string memory name,\\r\\n        string memory organization\\r\\n    ) external onlyOwner whenNotPaused {\\r\\n        require(issuer != address(0), \\\"IssuerRegistry: Invalid issuer address\\\");\\r\\n        require(bytes(name).length > 0, \\\"IssuerRegistry: Name cannot be empty\\\");\\r\\n        require(!issuers[issuer].authorized, \\\"IssuerRegistry: Issuer already exists\\\");\\r\\n\\r\\n        _addIssuerInternal(issuer, name, organization);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to add issuer\\r\\n     */\\r\\n    function _addIssuerInternal(\\r\\n        address issuer,\\r\\n        string memory name,\\r\\n        string memory organization\\r\\n    ) internal {\\r\\n        issuers[issuer] = IssuerInfo({\\r\\n            name: name,\\r\\n            organization: organization,\\r\\n            authorized: true,\\r\\n            addedAt: block.timestamp\\r\\n        });\\r\\n\\r\\n        if (!isInArray[issuer]) {\\r\\n            issuerAddresses.push(issuer);\\r\\n            isInArray[issuer] = true;\\r\\n        }\\r\\n\\r\\n        emit IssuerAdded(issuer, name, organization, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove an authorized issuer\\r\\n     * @param issuer Address of the issuer to remove\\r\\n     */\\r\\n    function removeIssuer(address issuer) external onlyOwner whenNotPaused {\\r\\n        require(issuer != address(0), \\\"IssuerRegistry: Invalid issuer address\\\");\\r\\n        require(issuers[issuer].authorized, \\\"IssuerRegistry: Issuer not found\\\");\\r\\n        require(issuer != owner(), \\\"IssuerRegistry: Cannot remove owner\\\");\\r\\n\\r\\n        issuers[issuer].authorized = false;\\r\\n\\r\\n        emit IssuerRemoved(issuer, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update issuer information\\r\\n     * @param issuer Address of the issuer\\r\\n     * @param name New name\\r\\n     * @param organization New organization\\r\\n     */\\r\\n    function updateIssuer(\\r\\n        address issuer,\\r\\n        string memory name,\\r\\n        string memory organization\\r\\n    ) external onlyOwner whenNotPaused {\\r\\n        require(issuer != address(0), \\\"IssuerRegistry: Invalid issuer address\\\");\\r\\n        require(issuers[issuer].authorized, \\\"IssuerRegistry: Issuer not found\\\");\\r\\n        require(bytes(name).length > 0, \\\"IssuerRegistry: Name cannot be empty\\\");\\r\\n\\r\\n        issuers[issuer].name = name;\\r\\n        issuers[issuer].organization = organization;\\r\\n\\r\\n        emit IssuerUpdated(issuer, name, organization, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an address is an authorized issuer\\r\\n     * @param issuer Address to check\\r\\n     * @return bool True if authorized, false otherwise\\r\\n     */\\r\\n    function isAuthorizedIssuer(address issuer) external view returns (bool) {\\r\\n        return issuers[issuer].authorized;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get issuer information\\r\\n     * @param issuer Address of the issuer\\r\\n     * @return IssuerInfo struct containing issuer details\\r\\n     */\\r\\n    function getIssuerInfo(address issuer) external view returns (IssuerInfo memory) {\\r\\n        return issuers[issuer];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get all authorized issuer addresses\\r\\n     * @return address[] Array of all issuer addresses\\r\\n     */\\r\\n    function getAllIssuers() external view returns (address[] memory) {\\r\\n        uint256 authorizedCount = 0;\\r\\n\\r\\n        // Count authorized issuers\\r\\n        for (uint256 i = 0; i < issuerAddresses.length; i++) {\\r\\n            if (issuers[issuerAddresses[i]].authorized) {\\r\\n                authorizedCount++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Create array of authorized issuers\\r\\n        address[] memory authorizedIssuers = new address[](authorizedCount);\\r\\n        uint256 index = 0;\\r\\n\\r\\n        for (uint256 i = 0; i < issuerAddresses.length; i++) {\\r\\n            if (issuers[issuerAddresses[i]].authorized) {\\r\\n                authorizedIssuers[index] = issuerAddresses[i];\\r\\n                index++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return authorizedIssuers;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get total count of authorized issuers\\r\\n     * @return uint256 Count of authorized issuers\\r\\n     */\\r\\n    function getAuthorizedIssuerCount() external view returns (uint256) {\\r\\n        uint256 count = 0;\\r\\n        for (uint256 i = 0; i < issuerAddresses.length; i++) {\\r\\n            if (issuers[issuerAddresses[i]].authorized) {\\r\\n                count++;\\r\\n            }\\r\\n        }\\r\\n        return count;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Pause the contract\\r\\n     */\\r\\n    function pause() external onlyOwner {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Unpause the contract\\r\\n     */\\r\\n    function unpause() external onlyOwner {\\r\\n        _unpause();\\r\\n    }\\r\\n}\",\"keccak256\":\"0x2ff2ba6a3a1cc897ce7bc3452860e0ad8b4f75829100e34d867b694dacdc976b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620016593803806200165983398101604081905262000034916200027a565b806001600160a01b0381166200006457604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6200006f81620000d6565b506000805460ff60a01b19169055604080518082018252600c81526b29bcb9ba32b69020b236b4b760a11b6020808301919091528251808401909352600a8352695342542053797374656d60b01b90830152620000cf9183919062000126565b506200049f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60408051608081018252838152602080820184905260018284018190524260608401526001600160a01b0387166000908152915291909120815181906200016e908262000351565b506020820151600182019062000185908262000351565b5060408281015160028301805460ff19169115159190911790556060909201516003918201556001600160a01b0385166000908152602091909152205460ff166200022e576002805460018082019092557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b0386169081179091556000908152600360205260409020805460ff191690911790555b826001600160a01b03167f2a1e6846aed5ec6606346a918a5642662454a6bb83024c1bcbd7dd4c6f1dd8848383426040516200026d9392919062000465565b60405180910390a2505050565b6000602082840312156200028d57600080fd5b81516001600160a01b0381168114620002a557600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620002d757607f821691505b602082108103620002f857634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200034c57600081815260208120601f850160051c81016020861015620003275750805b601f850160051c820191505b81811015620003485782815560010162000333565b5050505b505050565b81516001600160401b038111156200036d576200036d620002ac565b62000385816200037e8454620002c2565b84620002fe565b602080601f831160018114620003bd5760008415620003a45750858301515b600019600386901b1c1916600185901b17855562000348565b600085815260208120601f198616915b82811015620003ee57888601518255948401946001909101908401620003cd565b50858210156200040d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000815180845260005b81811015620004455760208185018101518683018201520162000427565b506000602082860101526020601f19601f83011685010191505092915050565b6060815260006200047a60608301866200041d565b82810360208401526200048e81866200041d565b915050826040830152949350505050565b6111aa80620004af6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80635c975abb1161008c578063831459af11610066578063831459af146101f05780638456cb59146102065780638da5cb5b1461020e578063f2fde38b1461021f57600080fd5b80635c975abb146101b65780635e9aab70146101c8578063715018a6146101e857600080fd5b80633f4ba83a116100c85780633f4ba83a14610173578063451c36711461017b57806347bc70931461018e5780634c32c35c146101a157600080fd5b80631aa76b43146100ef5780632fad59911461010457806331ba196614610134575b600080fd5b6101026100fd366004610d97565b610232565b005b610117610112366004610e0b565b61031c565b6040516001600160a01b0390911681526020015b60405180910390f35b610163610142366004610e24565b6001600160a01b031660009081526001602052604090206002015460ff1690565b604051901515815260200161012b565b610102610346565b610102610189366004610d97565b610358565b61010261019c366004610e24565b6104ae565b6101a9610627565b60405161012b9190610e46565b600054600160a01b900460ff16610163565b6101db6101d6366004610e24565b6107bf565b60405161012b9190610ed9565b610102610952565b6101f8610964565b60405190815260200161012b565b6101026109e0565b6000546001600160a01b0316610117565b61010261022d366004610e24565b6109f0565b61023a610a2e565b610242610a5b565b6001600160a01b0383166102715760405162461bcd60e51b815260040161026890610f35565b60405180910390fd5b60008251116102925760405162461bcd60e51b815260040161026890610f7b565b6001600160a01b03831660009081526001602052604090206002015460ff161561030c5760405162461bcd60e51b815260206004820152602560248201527f49737375657252656769737472793a2049737375657220616c72656164792065604482015264786973747360d81b6064820152608401610268565b610317838383610a86565b505050565b6002818154811061032c57600080fd5b6000918252602090912001546001600160a01b0316905081565b61034e610a2e565b610356610bc6565b565b610360610a2e565b610368610a5b565b6001600160a01b03831661038e5760405162461bcd60e51b815260040161026890610f35565b6001600160a01b03831660009081526001602052604090206002015460ff166103f95760405162461bcd60e51b815260206004820181905260248201527f49737375657252656769737472793a20497373756572206e6f7420666f756e646044820152606401610268565b600082511161041a5760405162461bcd60e51b815260040161026890610f7b565b6001600160a01b038316600090815260016020526040902061043c8382611041565b506001600160a01b0383166000908152600160208190526040909120016104638282611041565b50826001600160a01b03167fbcc21d9c4b4590f46b181515ac40d4fad6cbd1b24440b56d137f8800a818f2f78383426040516104a193929190611101565b60405180910390a2505050565b6104b6610a2e565b6104be610a5b565b6001600160a01b0381166104e45760405162461bcd60e51b815260040161026890610f35565b6001600160a01b03811660009081526001602052604090206002015460ff1661054f5760405162461bcd60e51b815260206004820181905260248201527f49737375657252656769737472793a20497373756572206e6f7420666f756e646044820152606401610268565b6000546001600160a01b03166001600160a01b0316816001600160a01b0316036105c75760405162461bcd60e51b815260206004820152602360248201527f49737375657252656769737472793a2043616e6e6f742072656d6f7665206f776044820152623732b960e91b6064820152608401610268565b6001600160a01b03811660008181526001602052604090819020600201805460ff19169055517f7d646dfe52f77b8ef31868b9cddadbd17ee190aba7615b1c4c456bf6e5f5a2da9061061c9042815260200190565b60405180910390a250565b60606000805b60025481101561069e57600160006002838154811061064e5761064e611137565b60009182526020808320909101546001600160a01b0316835282019290925260400190206002015460ff161561068c57816106888161114d565b9250505b806106968161114d565b91505061062d565b5060008167ffffffffffffffff8111156106ba576106ba610cf4565b6040519080825280602002602001820160405280156106e3578160200160208202803683370190505b5090506000805b6002548110156107b657600160006002838154811061070b5761070b611137565b60009182526020808320909101546001600160a01b0316835282019290925260400190206002015460ff16156107a4576002818154811061074e5761074e611137565b9060005260206000200160009054906101000a90046001600160a01b031683838151811061077e5761077e611137565b6001600160a01b0390921660209283029190910190910152816107a08161114d565b9250505b806107ae8161114d565b9150506106ea565b50909392505050565b6107ec60405180608001604052806060815260200160608152602001600015158152602001600081525090565b6001600160a01b0382166000908152600160205260409081902081516080810190925280548290829061081e90610fbf565b80601f016020809104026020016040519081016040528092919081815260200182805461084a90610fbf565b80156108975780601f1061086c57610100808354040283529160200191610897565b820191906000526020600020905b81548152906001019060200180831161087a57829003601f168201915b505050505081526020016001820180546108b090610fbf565b80601f01602080910402602001604051908101604052809291908181526020018280546108dc90610fbf565b80156109295780601f106108fe57610100808354040283529160200191610929565b820191906000526020600020905b81548152906001019060200180831161090c57829003601f168201915b5050509183525050600282015460ff161515602082015260039091015460409091015292915050565b61095a610a2e565b6103566000610c1b565b600080805b6002548110156109da57600160006002838154811061098a5761098a611137565b60009182526020808320909101546001600160a01b0316835282019290925260400190206002015460ff16156109c857816109c48161114d565b9250505b806109d28161114d565b915050610969565b50919050565b6109e8610a2e565b610356610c6b565b6109f8610a2e565b6001600160a01b038116610a2257604051631e4fbdf760e01b815260006004820152602401610268565b610a2b81610c1b565b50565b6000546001600160a01b031633146103565760405163118cdaa760e01b8152336004820152602401610268565b600054600160a01b900460ff16156103565760405163d93c066560e01b815260040160405180910390fd5b60408051608081018252838152602080820184905260018284018190524260608401526001600160a01b038716600090815291529190912081518190610acc9082611041565b5060208201516001820190610ae19082611041565b5060408281015160028301805460ff19169115159190911790556060909201516003918201556001600160a01b0385166000908152602091909152205460ff16610b89576002805460018082019092557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b0386169081179091556000908152600360205260409020805460ff191690911790555b826001600160a01b03167f2a1e6846aed5ec6606346a918a5642662454a6bb83024c1bcbd7dd4c6f1dd8848383426040516104a193929190611101565b610bce610cae565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610c73610a5b565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610bfe3390565b600054600160a01b900460ff1661035657604051638dfc202b60e01b815260040160405180910390fd5b80356001600160a01b0381168114610cef57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610d1b57600080fd5b813567ffffffffffffffff80821115610d3657610d36610cf4565b604051601f8301601f19908116603f01168101908282118183101715610d5e57610d5e610cf4565b81604052838152866020858801011115610d7757600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600060608486031215610dac57600080fd5b610db584610cd8565b9250602084013567ffffffffffffffff80821115610dd257600080fd5b610dde87838801610d0a565b93506040860135915080821115610df457600080fd5b50610e0186828701610d0a565b9150509250925092565b600060208284031215610e1d57600080fd5b5035919050565b600060208284031215610e3657600080fd5b610e3f82610cd8565b9392505050565b6020808252825182820181905260009190848201906040850190845b81811015610e875783516001600160a01b031683529284019291840191600101610e62565b50909695505050505050565b6000815180845260005b81811015610eb957602081850181015186830182015201610e9d565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000825160806020840152610ef560a0840182610e93565b90506020840151601f19848303016040850152610f128282610e93565b915050604084015115156060840152606084015160808401528091505092915050565b60208082526026908201527f49737375657252656769737472793a20496e76616c696420697373756572206160408201526564647265737360d01b606082015260800190565b60208082526024908201527f49737375657252656769737472793a204e616d652063616e6e6f7420626520656040820152636d70747960e01b606082015260800190565b600181811c90821680610fd357607f821691505b6020821081036109da57634e487b7160e01b600052602260045260246000fd5b601f82111561031757600081815260208120601f850160051c8101602086101561101a5750805b601f850160051c820191505b8181101561103957828155600101611026565b505050505050565b815167ffffffffffffffff81111561105b5761105b610cf4565b61106f816110698454610fbf565b84610ff3565b602080601f8311600181146110a4576000841561108c5750858301515b600019600386901b1c1916600185901b178555611039565b600085815260208120601f198616915b828110156110d3578886015182559484019460019091019084016110b4565b50858210156110f15787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6060815260006111146060830186610e93565b82810360208401526111268186610e93565b915050826040830152949350505050565b634e487b7160e01b600052603260045260246000fd5b60006001820161116d57634e487b7160e01b600052601160045260246000fd5b506001019056fea26469706673582212205a3e6ce21ec27c3100b4283b6fb395ee6256ff03946234b05f204ef7b818189a64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c80635c975abb1161008c578063831459af11610066578063831459af146101f05780638456cb59146102065780638da5cb5b1461020e578063f2fde38b1461021f57600080fd5b80635c975abb146101b65780635e9aab70146101c8578063715018a6146101e857600080fd5b80633f4ba83a116100c85780633f4ba83a14610173578063451c36711461017b57806347bc70931461018e5780634c32c35c146101a157600080fd5b80631aa76b43146100ef5780632fad59911461010457806331ba196614610134575b600080fd5b6101026100fd366004610d97565b610232565b005b610117610112366004610e0b565b61031c565b6040516001600160a01b0390911681526020015b60405180910390f35b610163610142366004610e24565b6001600160a01b031660009081526001602052604090206002015460ff1690565b604051901515815260200161012b565b610102610346565b610102610189366004610d97565b610358565b61010261019c366004610e24565b6104ae565b6101a9610627565b60405161012b9190610e46565b600054600160a01b900460ff16610163565b6101db6101d6366004610e24565b6107bf565b60405161012b9190610ed9565b610102610952565b6101f8610964565b60405190815260200161012b565b6101026109e0565b6000546001600160a01b0316610117565b61010261022d366004610e24565b6109f0565b61023a610a2e565b610242610a5b565b6001600160a01b0383166102715760405162461bcd60e51b815260040161026890610f35565b60405180910390fd5b60008251116102925760405162461bcd60e51b815260040161026890610f7b565b6001600160a01b03831660009081526001602052604090206002015460ff161561030c5760405162461bcd60e51b815260206004820152602560248201527f49737375657252656769737472793a2049737375657220616c72656164792065604482015264786973747360d81b6064820152608401610268565b610317838383610a86565b505050565b6002818154811061032c57600080fd5b6000918252602090912001546001600160a01b0316905081565b61034e610a2e565b610356610bc6565b565b610360610a2e565b610368610a5b565b6001600160a01b03831661038e5760405162461bcd60e51b815260040161026890610f35565b6001600160a01b03831660009081526001602052604090206002015460ff166103f95760405162461bcd60e51b815260206004820181905260248201527f49737375657252656769737472793a20497373756572206e6f7420666f756e646044820152606401610268565b600082511161041a5760405162461bcd60e51b815260040161026890610f7b565b6001600160a01b038316600090815260016020526040902061043c8382611041565b506001600160a01b0383166000908152600160208190526040909120016104638282611041565b50826001600160a01b03167fbcc21d9c4b4590f46b181515ac40d4fad6cbd1b24440b56d137f8800a818f2f78383426040516104a193929190611101565b60405180910390a2505050565b6104b6610a2e565b6104be610a5b565b6001600160a01b0381166104e45760405162461bcd60e51b815260040161026890610f35565b6001600160a01b03811660009081526001602052604090206002015460ff1661054f5760405162461bcd60e51b815260206004820181905260248201527f49737375657252656769737472793a20497373756572206e6f7420666f756e646044820152606401610268565b6000546001600160a01b03166001600160a01b0316816001600160a01b0316036105c75760405162461bcd60e51b815260206004820152602360248201527f49737375657252656769737472793a2043616e6e6f742072656d6f7665206f776044820152623732b960e91b6064820152608401610268565b6001600160a01b03811660008181526001602052604090819020600201805460ff19169055517f7d646dfe52f77b8ef31868b9cddadbd17ee190aba7615b1c4c456bf6e5f5a2da9061061c9042815260200190565b60405180910390a250565b60606000805b60025481101561069e57600160006002838154811061064e5761064e611137565b60009182526020808320909101546001600160a01b0316835282019290925260400190206002015460ff161561068c57816106888161114d565b9250505b806106968161114d565b91505061062d565b5060008167ffffffffffffffff8111156106ba576106ba610cf4565b6040519080825280602002602001820160405280156106e3578160200160208202803683370190505b5090506000805b6002548110156107b657600160006002838154811061070b5761070b611137565b60009182526020808320909101546001600160a01b0316835282019290925260400190206002015460ff16156107a4576002818154811061074e5761074e611137565b9060005260206000200160009054906101000a90046001600160a01b031683838151811061077e5761077e611137565b6001600160a01b0390921660209283029190910190910152816107a08161114d565b9250505b806107ae8161114d565b9150506106ea565b50909392505050565b6107ec60405180608001604052806060815260200160608152602001600015158152602001600081525090565b6001600160a01b0382166000908152600160205260409081902081516080810190925280548290829061081e90610fbf565b80601f016020809104026020016040519081016040528092919081815260200182805461084a90610fbf565b80156108975780601f1061086c57610100808354040283529160200191610897565b820191906000526020600020905b81548152906001019060200180831161087a57829003601f168201915b505050505081526020016001820180546108b090610fbf565b80601f01602080910402602001604051908101604052809291908181526020018280546108dc90610fbf565b80156109295780601f106108fe57610100808354040283529160200191610929565b820191906000526020600020905b81548152906001019060200180831161090c57829003601f168201915b5050509183525050600282015460ff161515602082015260039091015460409091015292915050565b61095a610a2e565b6103566000610c1b565b600080805b6002548110156109da57600160006002838154811061098a5761098a611137565b60009182526020808320909101546001600160a01b0316835282019290925260400190206002015460ff16156109c857816109c48161114d565b9250505b806109d28161114d565b915050610969565b50919050565b6109e8610a2e565b610356610c6b565b6109f8610a2e565b6001600160a01b038116610a2257604051631e4fbdf760e01b815260006004820152602401610268565b610a2b81610c1b565b50565b6000546001600160a01b031633146103565760405163118cdaa760e01b8152336004820152602401610268565b600054600160a01b900460ff16156103565760405163d93c066560e01b815260040160405180910390fd5b60408051608081018252838152602080820184905260018284018190524260608401526001600160a01b038716600090815291529190912081518190610acc9082611041565b5060208201516001820190610ae19082611041565b5060408281015160028301805460ff19169115159190911790556060909201516003918201556001600160a01b0385166000908152602091909152205460ff16610b89576002805460018082019092557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b0386169081179091556000908152600360205260409020805460ff191690911790555b826001600160a01b03167f2a1e6846aed5ec6606346a918a5642662454a6bb83024c1bcbd7dd4c6f1dd8848383426040516104a193929190611101565b610bce610cae565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610c73610a5b565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610bfe3390565b600054600160a01b900460ff1661035657604051638dfc202b60e01b815260040160405180910390fd5b80356001600160a01b0381168114610cef57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610d1b57600080fd5b813567ffffffffffffffff80821115610d3657610d36610cf4565b604051601f8301601f19908116603f01168101908282118183101715610d5e57610d5e610cf4565b81604052838152866020858801011115610d7757600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600060608486031215610dac57600080fd5b610db584610cd8565b9250602084013567ffffffffffffffff80821115610dd257600080fd5b610dde87838801610d0a565b93506040860135915080821115610df457600080fd5b50610e0186828701610d0a565b9150509250925092565b600060208284031215610e1d57600080fd5b5035919050565b600060208284031215610e3657600080fd5b610e3f82610cd8565b9392505050565b6020808252825182820181905260009190848201906040850190845b81811015610e875783516001600160a01b031683529284019291840191600101610e62565b50909695505050505050565b6000815180845260005b81811015610eb957602081850181015186830182015201610e9d565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000825160806020840152610ef560a0840182610e93565b90506020840151601f19848303016040850152610f128282610e93565b915050604084015115156060840152606084015160808401528091505092915050565b60208082526026908201527f49737375657252656769737472793a20496e76616c696420697373756572206160408201526564647265737360d01b606082015260800190565b60208082526024908201527f49737375657252656769737472793a204e616d652063616e6e6f7420626520656040820152636d70747960e01b606082015260800190565b600181811c90821680610fd357607f821691505b6020821081036109da57634e487b7160e01b600052602260045260246000fd5b601f82111561031757600081815260208120601f850160051c8101602086101561101a5750805b601f850160051c820191505b8181101561103957828155600101611026565b505050505050565b815167ffffffffffffffff81111561105b5761105b610cf4565b61106f816110698454610fbf565b84610ff3565b602080601f8311600181146110a4576000841561108c5750858301515b600019600386901b1c1916600185901b178555611039565b600085815260208120601f198616915b828110156110d3578886015182559484019460019091019084016110b4565b50858210156110f15787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6060815260006111146060830186610e93565b82810360208401526111268186610e93565b915050826040830152949350505050565b634e487b7160e01b600052603260045260246000fd5b60006001820161116d57634e487b7160e01b600052601160045260246000fd5b506001019056fea26469706673582212205a3e6ce21ec27c3100b4283b6fb395ee6256ff03946234b05f204ef7b818189a64736f6c63430008140033",
  "devdoc": {
    "author": "SBT System POC",
    "details": "Contract to manage authorized SBT issuers",
    "errors": {
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "addIssuer(address,string,string)": {
        "details": "Add a new authorized issuer",
        "params": {
          "issuer": "Address of the issuer",
          "name": "Name of the issuer",
          "organization": "Organization name"
        }
      },
      "getAllIssuers()": {
        "details": "Get all authorized issuer addresses",
        "returns": {
          "_0": "address[] Array of all issuer addresses"
        }
      },
      "getAuthorizedIssuerCount()": {
        "details": "Get total count of authorized issuers",
        "returns": {
          "_0": "uint256 Count of authorized issuers"
        }
      },
      "getIssuerInfo(address)": {
        "details": "Get issuer information",
        "params": {
          "issuer": "Address of the issuer"
        },
        "returns": {
          "_0": "IssuerInfo struct containing issuer details"
        }
      },
      "isAuthorizedIssuer(address)": {
        "details": "Check if an address is an authorized issuer",
        "params": {
          "issuer": "Address to check"
        },
        "returns": {
          "_0": "bool True if authorized, false otherwise"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Pause the contract"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "removeIssuer(address)": {
        "details": "Remove an authorized issuer",
        "params": {
          "issuer": "Address of the issuer to remove"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Unpause the contract"
      },
      "updateIssuer(address,string,string)": {
        "details": "Update issuer information",
        "params": {
          "issuer": "Address of the issuer",
          "name": "New name",
          "organization": "New organization"
        }
      }
    },
    "title": "IssuerRegistry",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/IssuerRegistry.sol:IssuerRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2069,
        "contract": "contracts/IssuerRegistry.sol:IssuerRegistry",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3719,
        "contract": "contracts/IssuerRegistry.sol:IssuerRegistry",
        "label": "issuers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(IssuerInfo)3714_storage)"
      },
      {
        "astId": 3722,
        "contract": "contracts/IssuerRegistry.sol:IssuerRegistry",
        "label": "issuerAddresses",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3726,
        "contract": "contracts/IssuerRegistry.sol:IssuerRegistry",
        "label": "isInArray",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(IssuerInfo)3714_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IssuerRegistry.IssuerInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(IssuerInfo)3714_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(IssuerInfo)3714_storage": {
        "encoding": "inplace",
        "label": "struct IssuerRegistry.IssuerInfo",
        "members": [
          {
            "astId": 3707,
            "contract": "contracts/IssuerRegistry.sol:IssuerRegistry",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 3709,
            "contract": "contracts/IssuerRegistry.sol:IssuerRegistry",
            "label": "organization",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 3711,
            "contract": "contracts/IssuerRegistry.sol:IssuerRegistry",
            "label": "authorized",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 3713,
            "contract": "contracts/IssuerRegistry.sol:IssuerRegistry",
            "label": "addedAt",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}